
polkadot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb4  08006eb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ebc  08006ebc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000070  08006f34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08006f34  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f45d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002340  00000000  00000000  0002f4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  00031840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00032478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a3e  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae6b  00000000  00000000  0004a9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091a06  00000000  00000000  00055841  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000e72c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067b8 	.word	0x080067b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080067b8 	.word	0x080067b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f002 f907 	bl	8002798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f88d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa2d 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fa0b 	bl	80009ac <MX_DMA_Init>
  MX_RTC_Init();
 8000596:	f000 f951 	bl	800083c <MX_RTC_Init>
  MX_SPI1_Init();
 800059a:	f000 f975 	bl	8000888 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800059e:	f000 f9db 	bl	8000958 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80005a2:	f000 f9a7 	bl	80008f4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8f7 	bl	8000798 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SX1276_Init(SYNC_WORD, 24);  //Initialize the SX1276
 80005aa:	2118      	movs	r1, #24
 80005ac:	2012      	movs	r0, #18
 80005ae:	f001 feeb 	bl	8002388 <SX1276_Init>

  //PHASE 3 Demo:
  if(PI_NODE){
	  polkadot_init(4); //the hard-coded address of the Pi Node is 4
  } else {
	  uint32_t unique_seed = get_UID();	//initialize with a random ID
 80005b2:	f001 fc23 	bl	8001dfc <get_UID>
 80005b6:	6138      	str	r0, [r7, #16]
	  DEBUG_PRINT("device id: %d\n\r", unique_seed);
 80005b8:	6939      	ldr	r1, [r7, #16]
 80005ba:	4836      	ldr	r0, [pc, #216]	; (8000694 <main+0x114>)
 80005bc:	f002 f850 	bl	8002660 <DEBUG_PRINT>
	  srand(unique_seed);
 80005c0:	6938      	ldr	r0, [r7, #16]
 80005c2:	f005 fc79 	bl	8005eb8 <srand>
	  uint32_t new_id;
	  new_id = rand();
 80005c6:	f005 fc9b 	bl	8005f00 <rand>
 80005ca:	4603      	mov	r3, r0
 80005cc:	617b      	str	r3, [r7, #20]
	  while(new_id < 11){
 80005ce:	e003      	b.n	80005d8 <main+0x58>
		  new_id = rand();
 80005d0:	f005 fc96 	bl	8005f00 <rand>
 80005d4:	4603      	mov	r3, r0
 80005d6:	617b      	str	r3, [r7, #20]
	  while(new_id < 11){
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b0a      	cmp	r3, #10
 80005dc:	d9f8      	bls.n	80005d0 <main+0x50>
	  }
	  DEBUG_PRINT("New ID: %d\n\r", new_id);
 80005de:	6979      	ldr	r1, [r7, #20]
 80005e0:	482d      	ldr	r0, [pc, #180]	; (8000698 <main+0x118>)
 80005e2:	f002 f83d 	bl	8002660 <DEBUG_PRINT>
	  polkadot_init(new_id);
 80005e6:	6978      	ldr	r0, [r7, #20]
 80005e8:	f000 fb1c 	bl	8000c24 <polkadot_init>
	  rand_delay();
 80005ec:	f001 fbfe 	bl	8001dec <rand_delay>
	  mesh_send_hello();
 80005f0:	f000 fcdc 	bl	8000fac <mesh_send_hello>


//  //EMI TEST
//  HAL_Delay(100);
//  SX1276_Set_Mode(FSTX);  //set mode to FSTX so PLL is turned on
  SX1276_Start_Receive();
 80005f4:	f001 ffec 	bl	80025d0 <SX1276_Start_Receive>
//			  DEBUG_PRINT("Requesting data from node #%d\n\r", node_addr);
//			  mesh_transmit(node_addr, data_req_arr, 1);
//		  }
//		  SX1276_Start_Receive();		//go for a new packet
//	  }
	  if(xdone_flag){
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <main+0x11c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0fa      	beq.n	80005f8 <main+0x78>
		  xdone_flag = 0;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x11c>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
		  if(rx_flag){
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <main+0x120>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f2      	beq.n	80005f8 <main+0x78>
 8000612:	466b      	mov	r3, sp
 8000614:	461d      	mov	r5, r3
		      uint8_t len = SX1276_Read_Register(REG_RX_NB_BYTES); //get packet length
 8000616:	2013      	movs	r0, #19
 8000618:	f001 fe48 	bl	80022ac <SX1276_Read_Register>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
		      uint8_t rxbuf[len];
 8000620:	7bf8      	ldrb	r0, [r7, #15]
 8000622:	4603      	mov	r3, r0
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	b2c1      	uxtb	r1, r0
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	f04f 0400 	mov.w	r4, #0
 8000636:	00d4      	lsls	r4, r2, #3
 8000638:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800063c:	00cb      	lsls	r3, r1, #3
 800063e:	b2c1      	uxtb	r1, r0
 8000640:	f04f 0200 	mov.w	r2, #0
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	f04f 0400 	mov.w	r4, #0
 800064c:	00d4      	lsls	r4, r2, #3
 800064e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000652:	00cb      	lsls	r3, r1, #3
 8000654:	4603      	mov	r3, r0
 8000656:	3307      	adds	r3, #7
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	ebad 0d03 	sub.w	sp, sp, r3
 8000660:	466b      	mov	r3, sp
 8000662:	3300      	adds	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
		      SX1276_Read_Burst(REG_FIFO, rxbuf, len);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7bfa      	ldrb	r2, [r7, #15]
 800066a:	4619      	mov	r1, r3
 800066c:	2000      	movs	r0, #0
 800066e:	f001 fe53 	bl	8002318 <SX1276_Read_Burst>
		      SX1276_Set_Mode(STDBY);
 8000672:	2001      	movs	r0, #1
 8000674:	f001 fed6 	bl	8002424 <SX1276_Set_Mode>
		      DEBUG_PRINT("Entering Packet Handler\n\r");
 8000678:	480a      	ldr	r0, [pc, #40]	; (80006a4 <main+0x124>)
 800067a:	f001 fff1 	bl	8002660 <DEBUG_PRINT>
		      receive_packet_handler(rxbuf, len);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f849 	bl	800171c <receive_packet_handler>
		      SX1276_Start_Receive();
 800068a:	f001 ffa1 	bl	80025d0 <SX1276_Start_Receive>
 800068e:	46ad      	mov	sp, r5
	  if(xdone_flag){
 8000690:	e7b2      	b.n	80005f8 <main+0x78>
 8000692:	bf00      	nop
 8000694:	080067d0 	.word	0x080067d0
 8000698:	080067e0 	.word	0x080067e0
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	2000008d 	.word	0x2000008d
 80006a4:	080067f0 	.word	0x080067f0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b098      	sub	sp, #96	; 0x60
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fbf6 	bl	8005ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemClock_Config+0xe8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <SystemClock_Config+0xe8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xe8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xec>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a23      	ldr	r2, [pc, #140]	; (8000794 <SystemClock_Config+0xec>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <SystemClock_Config+0xec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000718:	230a      	movs	r3, #10
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fa2f 	bl	8003b94 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800073c:	f000 fa6a 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc8a 	bl	8004074 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 fa55 	bl	8000c14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800076e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000772:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fe6b 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000784:	f000 fa46 	bl	8000c14 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3760      	adds	r7, #96	; 0x60
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ADC1_Init+0x98>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_ADC1_Init+0xa0>)
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_ADC1_Init+0x98>)
 80007fa:	f002 f861 	bl	80028c0 <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fa06 	bl	8000c14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000808:	2310      	movs	r3, #16
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000810:	2302      	movs	r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0x98>)
 800081a:	f002 f9cd 	bl	8002bb8 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 f9f6 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200002b4 	.word	0x200002b4
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_RTC_Init+0x44>)
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <MX_RTC_Init+0x48>)
 8000844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_RTC_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_RTC_Init+0x44>)
 800084e:	227f      	movs	r2, #127	; 0x7f
 8000850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_RTC_Init+0x44>)
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_RTC_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_RTC_Init+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_RTC_Init+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_RTC_Init+0x44>)
 800086c:	f003 fee0 	bl	8004630 <HAL_RTC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000876:	f000 f9cd 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000350 	.word	0x20000350
 8000884:	40002800 	.word	0x40002800

08000888 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_SPI1_Init+0x64>)
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_SPI1_Init+0x64>)
 8000894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000898:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_SPI1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_SPI1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_SPI1_Init+0x64>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_SPI1_Init+0x64>)
 80008bc:	2228      	movs	r2, #40	; 0x28
 80008be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_SPI1_Init+0x64>)
 80008d4:	220a      	movs	r2, #10
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_SPI1_Init+0x64>)
 80008da:	f003 ff8e 	bl	80047fa <HAL_SPI_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e4:	f000 f996 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200004b4 	.word	0x200004b4
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_SPI2_Init+0x5c>)
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <MX_SPI2_Init+0x60>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI2_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI2_Init+0x5c>)
 800091e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000922:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI2_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI2_Init+0x5c>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI2_Init+0x5c>)
 800093e:	f003 ff5c 	bl	80047fa <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000948:	f000 f964 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000c4 	.word	0x200000c4
 8000954:	40003800 	.word	0x40003800

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f004 fdb4 	bl	80054fc <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f93b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200002fc 	.word	0x200002fc
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	200f      	movs	r0, #15
 80009d4:	f002 fbe9 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009d8:	200f      	movs	r0, #15
 80009da:	f002 fc02 	bl	80031e2 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a4b      	ldr	r2, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a3d      	ldr	r2, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <MX_GPIO_Init+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DATA_RDY_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000a78:	4830      	ldr	r0, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x150>)
 8000a7a:	f003 f859 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <MX_GPIO_Init+0x154>)
 8000a86:	f003 f853 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4828      	ldr	r0, [pc, #160]	; (8000b40 <MX_GPIO_Init+0x154>)
 8000a9e:	f002 fec5 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : XDONE_Pin */
  GPIO_InitStruct.Pin = XDONE_Pin;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_GPIO_Init+0x158>)
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XDONE_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_GPIO_Init+0x150>)
 8000ab6:	f002 feb9 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA_RDY_Pin LED_Pin */
  GPIO_InitStruct.Pin = DATA_RDY_Pin|LED_Pin;
 8000aba:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481a      	ldr	r0, [pc, #104]	; (8000b3c <MX_GPIO_Init+0x150>)
 8000ad4:	f002 feaa 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_AS_Pin */
  GPIO_InitStruct.Pin = SPI2_AS_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_GPIO_Init+0x15c>)
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_AS_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_GPIO_Init+0x150>)
 8000aee:	f002 fe9d 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1276_CS_Pin */
  GPIO_InitStruct.Pin = SX1276_CS_Pin;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1276_CS_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_GPIO_Init+0x154>)
 8000b0c:	f002 fe8e 	bl	800382c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2006      	movs	r0, #6
 8000b16:	f002 fb48 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b1a:	2006      	movs	r0, #6
 8000b1c:	f002 fb61 	bl	80031e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f002 fb40 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2a:	2028      	movs	r0, #40	; 0x28
 8000b2c:	f002 fb59 	bl	80031e2 <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020000 	.word	0x40020000
 8000b44:	10110000 	.word	0x10110000
 8000b48:	10210000 	.word	0x10210000

08000b4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == XDONE_Pin){
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d102      	bne.n	8000b62 <HAL_GPIO_EXTI_Callback+0x16>
		xdone_flag = 1;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
				mesh_transmit(node_addr, data_req_arr, 1);
			  }
		  }
		SX1276_Start_Receive();
	}
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000008c 	.word	0x2000008c

08000b74 <readTemp>:

uint16_t readTemp(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	DEBUG_PRINT("\tReading Temperature\n\r");
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <readTemp+0x30>)
 8000b7c:	f001 fd70 	bl	8002660 <DEBUG_PRINT>
	HAL_ADC_Start(&hadc1);
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <readTemp+0x34>)
 8000b82:	f001 fee1 	bl	8002948 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8000b86:	2101      	movs	r1, #1
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <readTemp+0x34>)
 8000b8a:	f001 ff83 	bl	8002a94 <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <readTemp+0x34>)
 8000b90:	f002 f804 	bl	8002b9c <HAL_ADC_GetValue>
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	return value;
 8000b98:	88fb      	ldrh	r3, [r7, #6]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800680c 	.word	0x0800680c
 8000ba8:	200002b4 	.word	0x200002b4

08000bac <DATA_RX_HANDLER>:
    tx_len = 5;
    return SUCCESS;
}

//FUNCTION FOR DOING STUFF WITH DATA
uint8_t DATA_RX_HANDLER(struct data_packet rx_pkt){
 8000bac:	b084      	sub	sp, #16
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	f107 0c18 	add.w	ip, r7, #24
 8000bb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Print the received data to the console
	DEBUG_PRINT("Received Data: ");
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <DATA_RX_HANDLER+0x60>)
 8000bbe:	f001 fd4f 	bl	8002660 <DEBUG_PRINT>
	DEBUG_PRINT((char *) rx_pkt.packet_data);
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fd4b 	bl	8002660 <DEBUG_PRINT>
	DEBUG_PRINT("\n\r");
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <DATA_RX_HANDLER+0x64>)
 8000bcc:	f001 fd48 	bl	8002660 <DEBUG_PRINT>
		spi_data[4] = (rx_pkt.source_id >> 16) & 0xFF;
		spi_data[5] = (rx_pkt.source_id >> 24) & 0xFF;
		spi_transfer(spi_data, 6);
		SX1276_Start_Receive();
	} else {
		if(rx_pkt.packet_data[0] == DATA_REQ){		//reply with my temperature if that was a data request
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b37      	cmp	r3, #55	; 0x37
 8000bd6:	d111      	bne.n	8000bfc <DATA_RX_HANDLER+0x50>
			uint16_t mytemp = readTemp();
 8000bd8:	f7ff ffcc 	bl	8000b74 <readTemp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	81fb      	strh	r3, [r7, #14]
			uint8_t temppack[2] = {(mytemp & 0xFF), (mytemp >> 8)};
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	713b      	strb	r3, [r7, #4]
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	717b      	strb	r3, [r7, #5]
			mesh_transmit(4, temppack, 2);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f000 f840 	bl	8000c7c <mesh_transmit>
		}
	}
	return SUCCESS;
 8000bfc:	23ff      	movs	r3, #255	; 0xff
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr
 8000c0c:	0800684c 	.word	0x0800684c
 8000c10:	0800685c 	.word	0x0800685c

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <polkadot_init>:
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

//initialize this as a mesh node
uint8_t polkadot_init(uint32_t id){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("Initializing Polkadot Node\n\r");
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <polkadot_init+0x44>)
 8000c2e:	f001 fd17 	bl	8002660 <DEBUG_PRINT>
	my_id = id;
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <polkadot_init+0x48>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6013      	str	r3, [r2, #0]
	rreq_id = rand();
 8000c38:	f005 f962 	bl	8005f00 <rand>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <polkadot_init+0x4c>)
 8000c42:	601a      	str	r2, [r3, #0]
	my_sequence_number = 0;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <polkadot_init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
	DEBUG_PRINT("Node ID: %d, Sequence Number: %d, RREQ ID: %d\n\r", my_id, my_sequence_number, rreq_id);
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <polkadot_init+0x48>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <polkadot_init+0x50>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <polkadot_init+0x4c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <polkadot_init+0x54>)
 8000c58:	f001 fd02 	bl	8002660 <DEBUG_PRINT>
	return SUCCESS;
 8000c5c:	23ff      	movs	r3, #255	; 0xff
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	08006860 	.word	0x08006860
 8000c6c:	2000056c 	.word	0x2000056c
 8000c70:	2000034c 	.word	0x2000034c
 8000c74:	200003b0 	.word	0x200003b0
 8000c78:	08006880 	.word	0x08006880

08000c7c <mesh_transmit>:

uint8_t mesh_transmit(uint32_t destination_id, uint8_t data[], uint8_t data_length){
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b090      	sub	sp, #64	; 0x40
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4613      	mov	r3, r2
 8000c88:	71fb      	strb	r3, [r7, #7]
	DEBUG_PRINT("Sending Data Over the Mesh\n\r");
 8000c8a:	483b      	ldr	r0, [pc, #236]	; (8000d78 <mesh_transmit+0xfc>)
 8000c8c:	f001 fce8 	bl	8002660 <DEBUG_PRINT>
	int8_t route_idx = route_exists(destination_id); 	//check the routing table to see if I have a route
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f000 ffa3 	bl	8001bdc <route_exists>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(route_idx != -1){
 8000c9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d022      	beq.n	8000cec <mesh_transmit+0x70>
		DEBUG_PRINT("Route is known. Unicasting Data\n\r");
 8000ca6:	4835      	ldr	r0, [pc, #212]	; (8000d7c <mesh_transmit+0x100>)
 8000ca8:	f001 fcda 	bl	8002660 <DEBUG_PRINT>
		struct unicast_route_table_entry route;
		route = unicast_route_table[route_idx];
 8000cac:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 8000cb0:	4933      	ldr	r1, [pc, #204]	; (8000d80 <mesh_transmit+0x104>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	f107 0414 	add.w	r4, r7, #20
 8000cc0:	461d      	mov	r5, r3
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cca:	e884 0003 	stmia.w	r4, {r0, r1}
		mesh_send_data(route.destination_id, route.destination_sequence_number, data,
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	69b9      	ldr	r1, [r7, #24]
 8000cd2:	6a3c      	ldr	r4, [r7, #32]
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <mesh_transmit+0x108>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	9202      	str	r2, [sp, #8]
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	f000 f85b 	bl	8000da0 <mesh_send_data>
 8000cea:	e03e      	b.n	8000d6a <mesh_transmit+0xee>
				route.next_hop_destination_id, 0, my_id, data_length);  //uincast the packet
	} else{
		DEBUG_PRINT("Route is not known. Requesting route\n\r");
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <mesh_transmit+0x10c>)
 8000cee:	f001 fcb7 	bl	8002660 <DEBUG_PRINT>

		rreq_id ++;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <mesh_transmit+0x110>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <mesh_transmit+0x110>)
 8000cfa:	6013      	str	r3, [r2, #0]
		mesh_send_rreq(destination_id, my_id, my_sequence_number, 0, rreq_id);  //build/send an RREQ
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <mesh_transmit+0x108>)
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <mesh_transmit+0x114>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <mesh_transmit+0x110>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f8c1 	bl	8000e94 <mesh_send_rreq>

		//add the packet to the noroute table
		DEBUG_PRINT("Adding the request to the noroute table\n\r");
 8000d12:	4820      	ldr	r0, [pc, #128]	; (8000d94 <mesh_transmit+0x118>)
 8000d14:	f001 fca4 	bl	8002660 <DEBUG_PRINT>
		noroute_table[noroute_table_entries].destination_id = destination_id;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <mesh_transmit+0x11c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	; (8000d9c <mesh_transmit+0x120>)
 8000d20:	460b      	mov	r3, r1
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	440b      	add	r3, r1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]
		noroute_table[noroute_table_entries].data = data;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <mesh_transmit+0x11c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <mesh_transmit+0x120>)
 8000d36:	460b      	mov	r3, r1
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	440b      	add	r3, r1
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3304      	adds	r3, #4
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	601a      	str	r2, [r3, #0]
		noroute_table[noroute_table_entries].data_length = data_length;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <mesh_transmit+0x11c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <mesh_transmit+0x120>)
 8000d4e:	460b      	mov	r3, r1
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	440b      	add	r3, r1
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3308      	adds	r3, #8
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	701a      	strb	r2, [r3, #0]
		noroute_table_entries ++;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <mesh_transmit+0x11c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <mesh_transmit+0x11c>)
 8000d68:	701a      	strb	r2, [r3, #0]
	}
	SX1276_Start_Receive();		//wait for a new packet
 8000d6a:	f001 fc31 	bl	80025d0 <SX1276_Start_Receive>
	return SUCCESS;
 8000d6e:	23ff      	movs	r3, #255	; 0xff
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bdb0      	pop	{r4, r5, r7, pc}
 8000d78:	080068b0 	.word	0x080068b0
 8000d7c:	080068d0 	.word	0x080068d0
 8000d80:	20000130 	.word	0x20000130
 8000d84:	2000056c 	.word	0x2000056c
 8000d88:	080068f4 	.word	0x080068f4
 8000d8c:	2000034c 	.word	0x2000034c
 8000d90:	200003b0 	.word	0x200003b0
 8000d94:	0800691c 	.word	0x0800691c
 8000d98:	200002b0 	.word	0x200002b0
 8000d9c:	20000370 	.word	0x20000370

08000da0 <mesh_send_data>:

uint8_t mesh_send_data(uint32_t destination_id, uint32_t dest_seq_num, uint8_t * data, uint32_t receiver, uint8_t num_hops, uint32_t source_id, uint8_t data_length){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b092      	sub	sp, #72	; 0x48
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	466b      	mov	r3, sp
 8000db0:	461d      	mov	r5, r3
	DEBUG_PRINT("Building a Data Packet\n\r");
 8000db2:	4835      	ldr	r0, [pc, #212]	; (8000e88 <mesh_send_data+0xe8>)
 8000db4:	f001 fc54 	bl	8002660 <DEBUG_PRINT>
	struct data_packet tosend;
	tosend.transmitter_id = my_id;
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <mesh_send_data+0xec>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	613b      	str	r3, [r7, #16]
	tosend.receiver_id = receiver;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	617b      	str	r3, [r7, #20]
	tosend.destination_id = destination_id;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
	tosend.source_id = source_id;
 8000dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc8:	623b      	str	r3, [r7, #32]
	tosend.num_hops = num_hops;
 8000dca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tosend.packet_data = data;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	tosend.data_length = data_length;
 8000dd6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000dda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	tosend.destination_sequence_number = dest_seq_num;
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	61fb      	str	r3, [r7, #28]

	//transmit the data packet
	DEBUG_PRINT("Transmitting a Data Packet to Node %d\n\r", destination_id);
 8000de2:	68f9      	ldr	r1, [r7, #12]
 8000de4:	482a      	ldr	r0, [pc, #168]	; (8000e90 <mesh_send_data+0xf0>)
 8000de6:	f001 fc3b 	bl	8002660 <DEBUG_PRINT>
	uint8_t packet_arr[DATA_BASE_PKT_LEN + data_length];
 8000dea:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000dee:	f103 0018 	add.w	r0, r3, #24
 8000df2:	1e43      	subs	r3, r0, #1
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	f04f 0400 	mov.w	r4, #0
 8000e06:	00d4      	lsls	r4, r2, #3
 8000e08:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e0c:	00cb      	lsls	r3, r1, #3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	f04f 0400 	mov.w	r4, #0
 8000e1e:	00d4      	lsls	r4, r2, #3
 8000e20:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e24:	00cb      	lsls	r3, r1, #3
 8000e26:	4603      	mov	r3, r0
 8000e28:	3307      	adds	r3, #7
 8000e2a:	08db      	lsrs	r3, r3, #3
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e32:	ab04      	add	r3, sp, #16
 8000e34:	3300      	adds	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t result = format_packet_data(tosend, packet_arr);
 8000e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	466c      	mov	r4, sp
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e50:	f000 f8ca 	bl	8000fe8 <format_packet_data>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	result &= SX1276_Transmit_Blocking(packet_arr, DATA_BASE_PKT_LEN + data_length);
 8000e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000e60:	3318      	adds	r3, #24
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	4610      	mov	r0, r2
 8000e68:	f001 fb46 	bl	80024f8 <SX1276_Transmit_Blocking>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e74:	4013      	ands	r3, r2
 8000e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 8000e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e7e:	46ad      	mov	sp, r5
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	08006948 	.word	0x08006948
 8000e8c:	2000056c 	.word	0x2000056c
 8000e90:	08006964 	.word	0x08006964

08000e94 <mesh_send_rreq>:

uint8_t mesh_send_rreq(uint32_t destination_id, uint32_t source_id, uint32_t source_sequence_number, uint8_t num_hops, uint32_t rreq_id){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	70fb      	strb	r3, [r7, #3]
	DEBUG_PRINT("Building an RREQ Packet\n\r");
 8000ea2:	481e      	ldr	r0, [pc, #120]	; (8000f1c <mesh_send_rreq+0x88>)
 8000ea4:	f001 fbdc 	bl	8002660 <DEBUG_PRINT>

	struct rreq_packet tosend;
	tosend.transmitter_id = my_id;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <mesh_send_rreq+0x8c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	tosend.destination_id = destination_id;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
	tosend.source_id = source_id;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
	tosend.num_hops = num_hops;
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tosend.source_sequence_number = source_sequence_number;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	tosend.rreq_id = rreq_id;
 8000ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30

	rreq_table_append(rreq_id); //don't want to see this again
 8000ec4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000ec6:	f000 fe43 	bl	8001b50 <rreq_table_append>

	DEBUG_PRINT("Broadcasting the RREQ\n\r");
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <mesh_send_rreq+0x90>)
 8000ecc:	f001 fbc8 	bl	8002660 <DEBUG_PRINT>

	uint8_t packet_arr[RREQ_BASE_PKT_LEN];
	uint8_t result = format_packet_rreq(tosend, packet_arr);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	466a      	mov	r2, sp
 8000ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000edc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ee0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eea:	f000 f92d 	bl	8001148 <format_packet_rreq>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	result &= SX1276_Transmit_Blocking(packet_arr, RREQ_BASE_PKT_LEN);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2118      	movs	r1, #24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fafc 	bl	80024f8 <SX1276_Transmit_Blocking>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f08:	4013      	ands	r3, r2
 8000f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return result;
 8000f0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3748      	adds	r7, #72	; 0x48
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	0800698c 	.word	0x0800698c
 8000f20:	2000056c 	.word	0x2000056c
 8000f24:	080069a8 	.word	0x080069a8

08000f28 <mesh_send_rrep>:

uint8_t mesh_send_rrep(uint32_t receiver_id, uint32_t destination_id, uint32_t source_id, uint8_t num_hops, uint32_t dest_seq_num){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	; 0x58
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	70fb      	strb	r3, [r7, #3]
	DEBUG_PRINT("Building an RREP Packet\n\r");
 8000f36:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <mesh_send_rrep+0x7c>)
 8000f38:	f001 fb92 	bl	8002660 <DEBUG_PRINT>

	struct rrep_packet tosend;
	tosend.transmitter_id = my_id;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <mesh_send_rrep+0x80>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	tosend.receiver_id = receiver_id;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
	tosend.destination_id = destination_id;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
	tosend.source_id = source_id;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
	tosend.num_hops = num_hops;
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	tosend.destination_sequence_number = dest_seq_num;
 8000f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t packet_arr[RREP_BASE_PKT_LEN];
	uint8_t result = format_packet_rrep(tosend, packet_arr);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	466a      	mov	r2, sp
 8000f60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f68:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f72:	f000 f97f 	bl	8001274 <format_packet_rrep>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	result &= SX1276_Transmit_Blocking(packet_arr, RREP_BASE_PKT_LEN);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2118      	movs	r1, #24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fab8 	bl	80024f8 <SX1276_Transmit_Blocking>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f90:	4013      	ands	r3, r2
 8000f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return result;
 8000f96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3748      	adds	r7, #72	; 0x48
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	080069c0 	.word	0x080069c0
 8000fa8:	2000056c 	.word	0x2000056c

08000fac <mesh_send_hello>:

uint8_t mesh_send_hello(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
	DEBUG_PRINT("Broadcasting a hello message\n\r");
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <mesh_send_hello+0x30>)
 8000fb4:	f001 fb54 	bl	8002660 <DEBUG_PRINT>
	uint8_t result = mesh_send_rreq(0, my_id, 0, 0, rreq_id);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <mesh_send_hello+0x34>)
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <mesh_send_hello+0x38>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff ff64 	bl	8000e94 <mesh_send_rreq>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
	return result;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	080069dc 	.word	0x080069dc
 8000fe0:	2000056c 	.word	0x2000056c
 8000fe4:	2000034c 	.word	0x2000034c

08000fe8 <format_packet_data>:

uint8_t format_packet_data(struct data_packet packet, uint8_t packet_arr[]){
 8000fe8:	b084      	sub	sp, #16
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	f107 0c10 	add.w	ip, r7, #16
 8000ff4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	packet_arr[0] = DATA_PACKET;
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	packet_arr[1] = 0;
 8000ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001000:	3301      	adds	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	packet_arr[2] = 0;
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	3302      	adds	r3, #2
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	packet_arr[3] = packet.num_hops;
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	3303      	adds	r3, #3
 8001012:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001016:	701a      	strb	r2, [r3, #0]
	packet_arr[7] = (my_id >> 24);
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <format_packet_data+0x15c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0e1a      	lsrs	r2, r3, #24
 800101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001020:	3307      	adds	r3, #7
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
	packet_arr[6] = (my_id >> 16) & 0xFF;
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <format_packet_data+0x15c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0c1a      	lsrs	r2, r3, #16
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	3306      	adds	r3, #6
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
	packet_arr[5] = (my_id >> 8) & 0xFF;
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <format_packet_data+0x15c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	0a1a      	lsrs	r2, r3, #8
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	3305      	adds	r3, #5
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
	packet_arr[4] = (my_id) & 0xFF;
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <format_packet_data+0x15c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	3304      	adds	r3, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

	packet_arr[11] = (packet.receiver_id >> 24);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	0e1a      	lsrs	r2, r3, #24
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	330b      	adds	r3, #11
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
	packet_arr[10] = (packet.receiver_id >> 16) & 0xFF;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	0c1a      	lsrs	r2, r3, #16
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	330a      	adds	r3, #10
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]
	packet_arr[9] = (packet.receiver_id >> 8) & 0xFF;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	0a1a      	lsrs	r2, r3, #8
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	3309      	adds	r3, #9
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
	packet_arr[8] = (packet.receiver_id) & 0xFF;
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	3308      	adds	r3, #8
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]

	packet_arr[15] = (packet.destination_id >> 24);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	0e1a      	lsrs	r2, r3, #24
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	330f      	adds	r3, #15
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
	packet_arr[14] = (packet.destination_id >> 16) & 0xFF;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	0c1a      	lsrs	r2, r3, #16
 800108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108e:	330e      	adds	r3, #14
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
	packet_arr[13] = (packet.destination_id >> 8) & 0xFF;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	330d      	adds	r3, #13
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
	packet_arr[12] = (packet.destination_id) & 0xFF;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	330c      	adds	r3, #12
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]

	packet_arr[19] = (packet.source_id >> 24);
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	0e1a      	lsrs	r2, r3, #24
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	3313      	adds	r3, #19
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
	packet_arr[18] = (packet.source_id >> 16) & 0xFF;
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	0c1a      	lsrs	r2, r3, #16
 80010ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010bc:	3312      	adds	r3, #18
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
	packet_arr[17] = (packet.source_id >> 8) & 0xFF;
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	0a1a      	lsrs	r2, r3, #8
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	3311      	adds	r3, #17
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]
	packet_arr[16] = (packet.source_id) & 0xFF;
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]

	packet_arr[23] = (packet.destination_sequence_number >> 24);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	0e1a      	lsrs	r2, r3, #24
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	3317      	adds	r3, #23
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
	packet_arr[22] = (packet.destination_sequence_number >> 16) & 0xFF;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	0c1a      	lsrs	r2, r3, #16
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	3316      	adds	r3, #22
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
	packet_arr[21] = (packet.destination_sequence_number >> 8) & 0xFF;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	0a1a      	lsrs	r2, r3, #8
 80010f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f6:	3315      	adds	r3, #21
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
	packet_arr[20] = (packet.destination_sequence_number) & 0xFF;
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001100:	3314      	adds	r3, #20
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < packet.data_length; i++){
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e00c      	b.n	8001126 <format_packet_data+0x13e>
		packet_arr[DATA_BASE_PKT_LEN + i] = packet.packet_data[i];
 800110c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	441a      	add	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3318      	adds	r3, #24
 8001116:	4619      	mov	r1, r3
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	440b      	add	r3, r1
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < packet.data_length; i++){
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4293      	cmp	r3, r2
 8001130:	dbec      	blt.n	800110c <format_packet_data+0x124>
	}

	return SUCCESS;
 8001132:	23ff      	movs	r3, #255	; 0xff
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	b004      	add	sp, #16
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000056c 	.word	0x2000056c

08001148 <format_packet_rreq>:

uint8_t format_packet_rreq(struct rreq_packet packet, uint8_t packet_arr[]){
 8001148:	b084      	sub	sp, #16
 800114a:	b490      	push	{r4, r7}
 800114c:	af00      	add	r7, sp, #0
 800114e:	f107 0408 	add.w	r4, r7, #8
 8001152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_arr[0] = RREQ_PACKET;
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	packet_arr[1] = 0;
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	3301      	adds	r3, #1
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	packet_arr[2] = 0;
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	3302      	adds	r3, #2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
	packet_arr[3] = packet.num_hops;
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	3303      	adds	r3, #3
 8001170:	7f3a      	ldrb	r2, [r7, #28]
 8001172:	701a      	strb	r2, [r3, #0]

	packet_arr[7] = (my_id >> 24);
 8001174:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <format_packet_rreq+0x128>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0e1a      	lsrs	r2, r3, #24
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	3307      	adds	r3, #7
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
	packet_arr[6] = (my_id >> 16) & 0xFF;
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <format_packet_rreq+0x128>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0c1a      	lsrs	r2, r3, #16
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	3306      	adds	r3, #6
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
	packet_arr[5] = (my_id >> 8) & 0xFF;
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <format_packet_rreq+0x128>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0a1a      	lsrs	r2, r3, #8
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	3305      	adds	r3, #5
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
	packet_arr[4] = (my_id) & 0xFF;
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <format_packet_rreq+0x128>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	3304      	adds	r3, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

	packet_arr[11] = (packet.rreq_id >> 24);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	0e1a      	lsrs	r2, r3, #24
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	330b      	adds	r3, #11
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
	packet_arr[10] = (packet.rreq_id >> 16) & 0xFF;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	0c1a      	lsrs	r2, r3, #16
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	330a      	adds	r3, #10
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
	packet_arr[9] = (packet.rreq_id >> 8) & 0xFF;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	0a1a      	lsrs	r2, r3, #8
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	3309      	adds	r3, #9
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
	packet_arr[8] = (packet.rreq_id) & 0xFF;
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	3308      	adds	r3, #8
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]

	packet_arr[15] = (packet.destination_id >> 24);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	0e1a      	lsrs	r2, r3, #24
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	330f      	adds	r3, #15
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
	packet_arr[14] = (packet.destination_id >> 16) & 0xFF;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	0c1a      	lsrs	r2, r3, #16
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	330e      	adds	r3, #14
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
	packet_arr[13] = (packet.destination_id >> 8) & 0xFF;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	0a1a      	lsrs	r2, r3, #8
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	330d      	adds	r3, #13
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	701a      	strb	r2, [r3, #0]
	packet_arr[12] = (packet.destination_id) & 0xFF;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	330c      	adds	r3, #12
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]

	packet_arr[19] = (packet.source_id >> 24);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	0e1a      	lsrs	r2, r3, #24
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	3313      	adds	r3, #19
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
	packet_arr[18] = (packet.source_id >> 16) & 0xFF;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	0c1a      	lsrs	r2, r3, #16
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3312      	adds	r3, #18
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
	packet_arr[17] = (packet.source_id >> 8) & 0xFF;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	0a1a      	lsrs	r2, r3, #8
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	3311      	adds	r3, #17
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
	packet_arr[16] = (packet.source_id) & 0xFF;
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3310      	adds	r3, #16
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]

	packet_arr[23] = (packet.source_sequence_number >> 24);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	0e1a      	lsrs	r2, r3, #24
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	3317      	adds	r3, #23
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
	packet_arr[22] = (packet.source_sequence_number >> 16) & 0xFF;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	0c1a      	lsrs	r2, r3, #16
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	3316      	adds	r3, #22
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
	packet_arr[21] = (packet.source_sequence_number >> 8) & 0xFF;
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	0a1a      	lsrs	r2, r3, #8
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	3315      	adds	r3, #21
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
	packet_arr[20] = (packet.source_sequence_number) & 0xFF;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	3314      	adds	r3, #20
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
 8001262:	23ff      	movs	r3, #255	; 0xff
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc90      	pop	{r4, r7}
 800126a:	b004      	add	sp, #16
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000056c 	.word	0x2000056c

08001274 <format_packet_rrep>:

uint8_t format_packet_rrep(struct rrep_packet packet, uint8_t packet_arr[]){
 8001274:	b084      	sub	sp, #16
 8001276:	b490      	push	{r4, r7}
 8001278:	af00      	add	r7, sp, #0
 800127a:	f107 0408 	add.w	r4, r7, #8
 800127e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_arr[0] = RREP_PACKET;
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]
	packet_arr[1] = 0;
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	3301      	adds	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	packet_arr[2] = 0;
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	3302      	adds	r3, #2
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
	packet_arr[3] = packet.num_hops;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	3303      	adds	r3, #3
 800129c:	7f3a      	ldrb	r2, [r7, #28]
 800129e:	701a      	strb	r2, [r3, #0]

	packet_arr[7] = (my_id >> 24);
 80012a0:	4b3e      	ldr	r3, [pc, #248]	; (800139c <format_packet_rrep+0x128>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0e1a      	lsrs	r2, r3, #24
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	3307      	adds	r3, #7
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
	packet_arr[6] = (my_id >> 16) & 0xFF;
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <format_packet_rrep+0x128>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	0c1a      	lsrs	r2, r3, #16
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3306      	adds	r3, #6
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
	packet_arr[5] = (my_id >> 8) & 0xFF;
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <format_packet_rrep+0x128>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0a1a      	lsrs	r2, r3, #8
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3305      	adds	r3, #5
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]
	packet_arr[4] = (my_id) & 0xFF;
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <format_packet_rrep+0x128>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3304      	adds	r3, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]

	packet_arr[11] = (packet.receiver_id >> 24);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0e1a      	lsrs	r2, r3, #24
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	330b      	adds	r3, #11
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
	packet_arr[10] = (packet.receiver_id >> 16) & 0xFF;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0c1a      	lsrs	r2, r3, #16
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	330a      	adds	r3, #10
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]
	packet_arr[9] = (packet.receiver_id >> 8) & 0xFF;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	0a1a      	lsrs	r2, r3, #8
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3309      	adds	r3, #9
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
	packet_arr[8] = (packet.receiver_id) & 0xFF;
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	3308      	adds	r3, #8
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]

	packet_arr[15] = (packet.destination_id >> 24);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	0e1a      	lsrs	r2, r3, #24
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	330f      	adds	r3, #15
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
	packet_arr[14] = (packet.destination_id >> 16) & 0xFF;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	0c1a      	lsrs	r2, r3, #16
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	330e      	adds	r3, #14
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
	packet_arr[13] = (packet.destination_id >> 8) & 0xFF;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	0a1a      	lsrs	r2, r3, #8
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	330d      	adds	r3, #13
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	701a      	strb	r2, [r3, #0]
	packet_arr[12] = (packet.destination_id) & 0xFF;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	330c      	adds	r3, #12
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]

	packet_arr[19] = (packet.destination_sequence_number >> 24);
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	0e1a      	lsrs	r2, r3, #24
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	3313      	adds	r3, #19
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
	packet_arr[18] = (packet.destination_sequence_number >> 16) & 0xFF;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	0c1a      	lsrs	r2, r3, #16
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	3312      	adds	r3, #18
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
	packet_arr[17] = (packet.destination_sequence_number >> 8) & 0xFF;
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	0a1a      	lsrs	r2, r3, #8
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	3311      	adds	r3, #17
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
	packet_arr[16] = (packet.destination_sequence_number) & 0xFF;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	3310      	adds	r3, #16
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]

	packet_arr[23] = (packet.source_id >> 24);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	0e1a      	lsrs	r2, r3, #24
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	3317      	adds	r3, #23
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
	packet_arr[22] = (packet.source_id >> 16) & 0xFF;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	0c1a      	lsrs	r2, r3, #16
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	3316      	adds	r3, #22
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
	packet_arr[21] = (packet.source_id >> 8) & 0xFF;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	0a1a      	lsrs	r2, r3, #8
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	3315      	adds	r3, #21
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
	packet_arr[20] = (packet.source_id) & 0xFF;
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	3314      	adds	r3, #20
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
 800138e:	23ff      	movs	r3, #255	; 0xff
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	b004      	add	sp, #16
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000056c 	.word	0x2000056c

080013a0 <unpack_packet_data>:

struct data_packet unpack_packet_data(uint8_t parr[], uint8_t data_length, uint8_t data[]){
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71fb      	strb	r3, [r7, #7]
	struct data_packet packet;
	packet.num_hops = parr[3];
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet.transmitter_id = (parr[7] << 24) | (parr[6] << 16) | (parr[5] << 8 ) | parr[4];
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3307      	adds	r3, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	061a      	lsls	r2, r3, #24
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3306      	adds	r3, #6
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3305      	adds	r3, #5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4313      	orrs	r3, r2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	3204      	adds	r2, #4
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
	packet.receiver_id = (parr[11] << 24) | (parr[10] << 16) | (parr[9] << 8 ) | parr[8];
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	330b      	adds	r3, #11
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	061a      	lsls	r2, r3, #24
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	330a      	adds	r3, #10
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	041b      	lsls	r3, r3, #16
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3309      	adds	r3, #9
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4313      	orrs	r3, r2
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	3208      	adds	r2, #8
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
	packet.destination_id = (parr[15] << 24) | (parr[14] << 16) | (parr[13] << 8 ) | parr[12];
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	330f      	adds	r3, #15
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	061a      	lsls	r2, r3, #24
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	330e      	adds	r3, #14
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	330d      	adds	r3, #13
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	4313      	orrs	r3, r2
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	320c      	adds	r2, #12
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
	packet.source_id = (parr[19] << 24) | (parr[18] << 16) | (parr[17] << 8 ) | parr[16];
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3313      	adds	r3, #19
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	061a      	lsls	r2, r3, #24
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3312      	adds	r3, #18
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	431a      	orrs	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	3311      	adds	r3, #17
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4313      	orrs	r3, r2
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	3210      	adds	r2, #16
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	4313      	orrs	r3, r2
 800144e:	623b      	str	r3, [r7, #32]
	packet.destination_sequence_number = (parr[23] << 24) | (parr[22] << 16) | (parr[21] << 8 ) | parr[20];
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	3317      	adds	r3, #23
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	061a      	lsls	r2, r3, #24
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3316      	adds	r3, #22
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	431a      	orrs	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3315      	adds	r3, #21
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	4313      	orrs	r3, r2
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	3214      	adds	r2, #20
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	61fb      	str	r3, [r7, #28]
	packet.packet_data = &parr[DATA_BASE_PKT_LEN];
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3318      	adds	r3, #24
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
	packet.data_length = data_length;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(int i = 0; i < data_length; i++){
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001486:	e00c      	b.n	80014a2 <unpack_packet_data+0x102>
		data[i] = parr[DATA_BASE_PKT_LEN+i];
 8001488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148a:	3318      	adds	r3, #24
 800148c:	461a      	mov	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	441a      	add	r2, r3
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < data_length; i++){
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	3301      	adds	r3, #1
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbee      	blt.n	8001488 <unpack_packet_data+0xe8>
	}

	DEBUG_PRINT("\tData packet with:\n\r");
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <unpack_packet_data+0x14c>)
 80014ac:	f001 f8d8 	bl	8002660 <DEBUG_PRINT>
	DEBUG_PRINT("\tnum_hops = %d\n\r\ttransmitter_id=%d\n\r\treceiver_id=%d\n\r\tdestination_id=%d\n\r\tsource_id=%d\n\r", packet.num_hops, packet.transmitter_id, packet.receiver_id, packet.destination_id, packet.source_id);
 80014b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014b4:	461c      	mov	r4, r3
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	6978      	ldr	r0, [r7, #20]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	9201      	str	r2, [sp, #4]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	4621      	mov	r1, r4
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <unpack_packet_data+0x150>)
 80014ca:	f001 f8c9 	bl	8002660 <DEBUG_PRINT>
	return packet;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	461d      	mov	r5, r3
 80014d2:	f107 0410 	add.w	r4, r7, #16
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080069fc 	.word	0x080069fc
 80014f0:	08006a14 	.word	0x08006a14

080014f4 <unpack_packet_rreq>:

struct rreq_packet unpack_packet_rreq(uint8_t parr[]){
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	struct rreq_packet packet;
	packet.num_hops = parr[3];
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	773b      	strb	r3, [r7, #28]
	packet.transmitter_id = (parr[7] << 24) | (parr[6] << 16) | (parr[5] << 8 ) | parr[4];
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3307      	adds	r3, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3306      	adds	r3, #6
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	041b      	lsls	r3, r3, #16
 8001514:	431a      	orrs	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3305      	adds	r3, #5
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	4313      	orrs	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	3204      	adds	r2, #4
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
	packet.rreq_id = (parr[11] << 24) | (parr[10] << 16) | (parr[9] << 8 ) | parr[8];
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	330b      	adds	r3, #11
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	061a      	lsls	r2, r3, #24
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	330a      	adds	r3, #10
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431a      	orrs	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3309      	adds	r3, #9
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4313      	orrs	r3, r2
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	3208      	adds	r2, #8
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
	packet.destination_id = (parr[15] << 24) | (parr[14] << 16) | (parr[13] << 8 ) | parr[12];
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	330f      	adds	r3, #15
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	061a      	lsls	r2, r3, #24
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	330e      	adds	r3, #14
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	330d      	adds	r3, #13
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4313      	orrs	r3, r2
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	320c      	adds	r2, #12
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
	packet.source_id = (parr[19] << 24) | (parr[18] << 16) | (parr[17] << 8 ) | parr[16];
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3313      	adds	r3, #19
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	061a      	lsls	r2, r3, #24
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3312      	adds	r3, #18
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3311      	adds	r3, #17
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4313      	orrs	r3, r2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	3210      	adds	r2, #16
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
	packet.source_sequence_number = (parr[23] << 24) | (parr[22] << 16) | (parr[21] << 8 ) | parr[20];
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3317      	adds	r3, #23
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	061a      	lsls	r2, r3, #24
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3316      	adds	r3, #22
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	041b      	lsls	r3, r3, #16
 80015ac:	431a      	orrs	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3315      	adds	r3, #21
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	4313      	orrs	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	3214      	adds	r2, #20
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]

	DEBUG_PRINT("\tRREQ packet with:\n\r");
 80015c2:	480f      	ldr	r0, [pc, #60]	; (8001600 <unpack_packet_rreq+0x10c>)
 80015c4:	f001 f84c 	bl	8002660 <DEBUG_PRINT>
	DEBUG_PRINT("\tnum_hops = %d\n\r\ttransmitter_id=%d\n\r\trreq_id=%d\n\r\tdestination_id=%d\n\r\tsource_id=%d\n\r", packet.num_hops, packet.transmitter_id, packet.rreq_id, packet.destination_id, packet.source_id);
 80015c8:	7f3b      	ldrb	r3, [r7, #28]
 80015ca:	461c      	mov	r4, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4603      	mov	r3, r0
 80015da:	460a      	mov	r2, r1
 80015dc:	4621      	mov	r1, r4
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <unpack_packet_rreq+0x110>)
 80015e0:	f001 f83e 	bl	8002660 <DEBUG_PRINT>

	return packet;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	461d      	mov	r5, r3
 80015e8:	f107 0408 	add.w	r4, r7, #8
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	08006a70 	.word	0x08006a70
 8001604:	08006a88 	.word	0x08006a88

08001608 <unpack_packet_rrep>:

struct rrep_packet unpack_packet_rrep(uint8_t parr[]){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af02      	add	r7, sp, #8
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	struct rrep_packet packet;
	packet.num_hops = parr[3];
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	773b      	strb	r3, [r7, #28]
	packet.transmitter_id = (parr[7] << 24) | (parr[6] << 16) | (parr[5] << 8 ) | parr[4];
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3307      	adds	r3, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	061a      	lsls	r2, r3, #24
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3306      	adds	r3, #6
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	431a      	orrs	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3305      	adds	r3, #5
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	4313      	orrs	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	3204      	adds	r2, #4
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
	packet.receiver_id = (parr[11] << 24) | (parr[10] << 16) | (parr[9] << 8 ) | parr[8];
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	330b      	adds	r3, #11
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	061a      	lsls	r2, r3, #24
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	330a      	adds	r3, #10
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3309      	adds	r3, #9
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4313      	orrs	r3, r2
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	3208      	adds	r2, #8
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
	packet.destination_id = (parr[15] << 24) | (parr[14] << 16) | (parr[13] << 8 ) | parr[12];
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	330f      	adds	r3, #15
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	061a      	lsls	r2, r3, #24
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	330e      	adds	r3, #14
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	330d      	adds	r3, #13
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	4313      	orrs	r3, r2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	320c      	adds	r2, #12
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
	packet.destination_sequence_number = (parr[19] << 24) | (parr[18] << 16) | (parr[17] << 8 ) | parr[16];
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	3313      	adds	r3, #19
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	061a      	lsls	r2, r3, #24
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3312      	adds	r3, #18
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3311      	adds	r3, #17
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	3210      	adds	r2, #16
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
	packet.source_id = (parr[23] << 24) | (parr[22] << 16) | (parr[21] << 8 ) | parr[20];
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	3317      	adds	r3, #23
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3316      	adds	r3, #22
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3315      	adds	r3, #21
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	3214      	adds	r2, #20
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

	DEBUG_PRINT("\tRREP packet with:\n\r");
 80016d6:	480f      	ldr	r0, [pc, #60]	; (8001714 <unpack_packet_rrep+0x10c>)
 80016d8:	f000 ffc2 	bl	8002660 <DEBUG_PRINT>
	DEBUG_PRINT("\tnum_hops = %d\n\r\ttransmitter_id=%d\n\r\treceiver_id=%d\n\r\tdestination_id=%d\n\r\tsource_id=%d\n\r", packet.num_hops, packet.transmitter_id, packet.receiver_id, packet.destination_id, packet.source_id);
 80016dc:	7f3b      	ldrb	r3, [r7, #28]
 80016de:	461c      	mov	r4, r3
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4603      	mov	r3, r0
 80016ee:	460a      	mov	r2, r1
 80016f0:	4621      	mov	r1, r4
 80016f2:	4809      	ldr	r0, [pc, #36]	; (8001718 <unpack_packet_rrep+0x110>)
 80016f4:	f000 ffb4 	bl	8002660 <DEBUG_PRINT>

	return packet;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	461d      	mov	r5, r3
 80016fc:	f107 0408 	add.w	r4, r7, #8
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001708:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	08006ae0 	.word	0x08006ae0
 8001718:	08006a14 	.word	0x08006a14

0800171c <receive_packet_handler>:

uint8_t receive_packet_handler(uint8_t packet_data[], uint8_t plength){
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b0a3      	sub	sp, #140	; 0x8c
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
	//rand_delay();	//wait a (random) little bit to avoid collisions
	DEBUG_PRINT("Entering Packet Handler\n\r");
 8001728:	48a8      	ldr	r0, [pc, #672]	; (80019cc <receive_packet_handler+0x2b0>)
 800172a:	f000 ff99 	bl	8002660 <DEBUG_PRINT>
	uint8_t ptype = packet_type(packet_data);  //extract the packet type
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f9ea 	bl	8001b08 <packet_type>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	DEBUG_PRINT("\tpacket type is %d\n\r", ptype);
 800173a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800173e:	4619      	mov	r1, r3
 8001740:	48a3      	ldr	r0, [pc, #652]	; (80019d0 <receive_packet_handler+0x2b4>)
 8001742:	f000 ff8d 	bl	8002660 <DEBUG_PRINT>
	//declare all potential packet types because we might need them
	if(ptype == RREQ_PACKET){
 8001746:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800174a:	2b01      	cmp	r3, #1
 800174c:	d167      	bne.n	800181e <receive_packet_handler+0x102>
		struct rreq_packet pkt;
		pkt = unpack_packet_rreq(packet_data);
 800174e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fecd 	bl	80014f4 <unpack_packet_rreq>
		if(!rreq_table_contains(pkt.rreq_id)) {//check if it's been seen before or if it's stale
 800175a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fa1b 	bl	8001b98 <rreq_table_contains>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 81c0 	bne.w	8001aea <receive_packet_handler+0x3ce>
			DEBUG_PRINT("Valid RREQ\n\r");
 800176a:	489a      	ldr	r0, [pc, #616]	; (80019d4 <receive_packet_handler+0x2b8>)
 800176c:	f000 ff78 	bl	8002660 <DEBUG_PRINT>
			rreq_table_append(pkt.rreq_id);		//add it to the rreq_table
 8001770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f9ec 	bl	8001b50 <rreq_table_append>
			update_route_table(pkt.source_id, pkt.source_sequence_number, pkt.num_hops, pkt.transmitter_id);			//update my personal routing table with information about the transmitter and source
 8001778:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800177a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800177c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8001780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001782:	f000 fa71 	bl	8001c68 <update_route_table>
			update_route_table(pkt.transmitter_id, 0, 0, pkt.transmitter_id);
 8001786:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	f000 fa6b 	bl	8001c68 <update_route_table>
			if(pkt.destination_id == my_id){		//it's me, unicast RREP back to source
 8001792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001794:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <receive_packet_handler+0x2bc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d108      	bne.n	80017ae <receive_packet_handler+0x92>
				mesh_send_rrep(pkt.transmitter_id, pkt.source_id, pkt.destination_id, 0, 0); //send an RREP packet
 800179c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800179e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80017a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f7ff fbbe 	bl	8000f28 <mesh_send_rrep>
 80017ac:	e02d      	b.n	800180a <receive_packet_handler+0xee>
			} else {
				int8_t route_idx = route_exists(pkt.destination_id);
 80017ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fa13 	bl	8001bdc <route_exists>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
				if(route_idx != -1){		//route exists, unicast RREP back to source
 80017bc:	f997 3070 	ldrsb.w	r3, [r7, #112]	; 0x70
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d015      	beq.n	80017f2 <receive_packet_handler+0xd6>
					mesh_send_rrep(pkt.transmitter_id, pkt.source_id, pkt.destination_id, unicast_route_table[route_idx].hop_count, 0); //send an RREP packet
 80017c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017c8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80017ca:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80017cc:	f997 2070 	ldrsb.w	r2, [r7, #112]	; 0x70
 80017d0:	4982      	ldr	r1, [pc, #520]	; (80019dc <receive_packet_handler+0x2c0>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3308      	adds	r3, #8
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4613      	mov	r3, r2
 80017e8:	462a      	mov	r2, r5
 80017ea:	4621      	mov	r1, r4
 80017ec:	f7ff fb9c 	bl	8000f28 <mesh_send_rrep>
 80017f0:	e00b      	b.n	800180a <receive_packet_handler+0xee>
				} else{
					mesh_send_rreq(pkt.destination_id, pkt.source_id, pkt.source_sequence_number, pkt.num_hops + 1, pkt.rreq_id); //increment hop count, broadcast an RREQ
 80017f2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80017f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80017f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80017f8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2dc      	uxtb	r4, r3
 8001800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	f7ff fb45 	bl	8000e94 <mesh_send_rreq>
				}
			}
			if(pkt.destination_id == 0) {
 800180a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 816c 	bne.w	8001aea <receive_packet_handler+0x3ce>
				DEBUG_PRINT("This is a hello packet from node %d\n\r", pkt.source_id);
 8001812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001814:	4619      	mov	r1, r3
 8001816:	4872      	ldr	r0, [pc, #456]	; (80019e0 <receive_packet_handler+0x2c4>)
 8001818:	f000 ff22 	bl	8002660 <DEBUG_PRINT>
 800181c:	e165      	b.n	8001aea <receive_packet_handler+0x3ce>
			}
		}
		//Dump the packet (do nothing)
	}
	else if(ptype == RREP_PACKET){
 800181e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001822:	2b02      	cmp	r3, #2
 8001824:	f040 80ea 	bne.w	80019fc <receive_packet_handler+0x2e0>
		struct rrep_packet pkt;
		pkt = unpack_packet_rrep(packet_data);
 8001828:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff feea 	bl	8001608 <unpack_packet_rrep>
		if(pkt.receiver_id == my_id){		//this is actually bad, but necessary for demo
 8001834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <receive_packet_handler+0x2bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d10c      	bne.n	8001858 <receive_packet_handler+0x13c>
			update_route_table(pkt.source_id, 0, pkt.num_hops, pkt.transmitter_id);			//update my personal routing table with information about the transmitter and source
 800183e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001840:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001846:	2100      	movs	r1, #0
 8001848:	f000 fa0e 	bl	8001c68 <update_route_table>
			update_route_table(pkt.transmitter_id, 0, 0, pkt.transmitter_id);
 800184c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800184e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	f000 fa08 	bl	8001c68 <update_route_table>
		}
		if(pkt.destination_id == my_id && pkt.receiver_id == my_id){  //it's intended for me! (second part necessary for demo)
 8001858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <receive_packet_handler+0x2bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	f040 8091 	bne.w	8001986 <receive_packet_handler+0x26a>
 8001864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <receive_packet_handler+0x2bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	f040 808b 	bne.w	8001986 <receive_packet_handler+0x26a>
			DEBUG_PRINT("RREP Packet is intended for me\n\r");
 8001870:	485c      	ldr	r0, [pc, #368]	; (80019e4 <receive_packet_handler+0x2c8>)
 8001872:	f000 fef5 	bl	8002660 <DEBUG_PRINT>
			//create a new unicast route table entry
			unicast_route_table[unicast_entries].destination_id = pkt.source_id;
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <receive_packet_handler+0x2cc>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800187c:	4857      	ldr	r0, [pc, #348]	; (80019dc <receive_packet_handler+0x2c0>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4403      	add	r3, r0
 8001888:	6019      	str	r1, [r3, #0]
			unicast_route_table[unicast_entries].destination_sequence_number = pkt.destination_sequence_number;
 800188a:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <receive_packet_handler+0x2cc>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001890:	4852      	ldr	r0, [pc, #328]	; (80019dc <receive_packet_handler+0x2c0>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4403      	add	r3, r0
 800189c:	3304      	adds	r3, #4
 800189e:	6019      	str	r1, [r3, #0]
			unicast_route_table[unicast_entries].hop_count = pkt.num_hops;
 80018a0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <receive_packet_handler+0x2cc>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4608      	mov	r0, r1
 80018aa:	494c      	ldr	r1, [pc, #304]	; (80019dc <receive_packet_handler+0x2c0>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3308      	adds	r3, #8
 80018b8:	6018      	str	r0, [r3, #0]
			unicast_route_table[unicast_entries].next_hop_destination_id = pkt.transmitter_id;
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <receive_packet_handler+0x2cc>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018c0:	4846      	ldr	r0, [pc, #280]	; (80019dc <receive_packet_handler+0x2c0>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4403      	add	r3, r0
 80018cc:	330c      	adds	r3, #12
 80018ce:	6019      	str	r1, [r3, #0]
			unicast_route_table[unicast_entries].precursor_nodes_destination_id_array = NULL;
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <receive_packet_handler+0x2cc>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4941      	ldr	r1, [pc, #260]	; (80019dc <receive_packet_handler+0x2c0>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3310      	adds	r3, #16
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
			unicast_route_table[unicast_entries].expiration_time = DEFAULT_ROUTE_EXPIRATION_TIME;
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <receive_packet_handler+0x2cc>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	493c      	ldr	r1, [pc, #240]	; (80019dc <receive_packet_handler+0x2c0>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3314      	adds	r3, #20
 80018f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fc:	601a      	str	r2, [r3, #0]
			unicast_entries ++;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <receive_packet_handler+0x2cc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <receive_packet_handler+0x2cc>)
 8001906:	6013      	str	r3, [r2, #0]


			//look for things to send from the noroute table and send them if they match the route I just added
			DEBUG_PRINT("Searching the noroute table for blocked requests, with %d entries\n\r", noroute_table_entries);
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <receive_packet_handler+0x2d0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	4838      	ldr	r0, [pc, #224]	; (80019f0 <receive_packet_handler+0x2d4>)
 8001910:	f000 fea6 	bl	8002660 <DEBUG_PRINT>
			for(int i = 0; i < noroute_table_entries; i++){
 8001914:	2300      	movs	r3, #0
 8001916:	677b      	str	r3, [r7, #116]	; 0x74
 8001918:	e02e      	b.n	8001978 <receive_packet_handler+0x25c>
				if(noroute_table[i].destination_id == pkt.source_id){
 800191a:	4936      	ldr	r1, [pc, #216]	; (80019f4 <receive_packet_handler+0x2d8>)
 800191c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192c:	429a      	cmp	r2, r3
 800192e:	d120      	bne.n	8001972 <receive_packet_handler+0x256>
					DEBUG_PRINT("Found a matching entry in the noroute table\n\r");
 8001930:	4831      	ldr	r0, [pc, #196]	; (80019f8 <receive_packet_handler+0x2dc>)
 8001932:	f000 fe95 	bl	8002660 <DEBUG_PRINT>
					mesh_transmit(noroute_table[i].destination_id, noroute_table[i].data, noroute_table[i].data_length);
 8001936:	492f      	ldr	r1, [pc, #188]	; (80019f4 <receive_packet_handler+0x2d8>)
 8001938:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	492b      	ldr	r1, [pc, #172]	; (80019f4 <receive_packet_handler+0x2d8>)
 8001948:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3304      	adds	r3, #4
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	4926      	ldr	r1, [pc, #152]	; (80019f4 <receive_packet_handler+0x2d8>)
 800195a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3308      	adds	r3, #8
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff f985 	bl	8000c7c <mesh_transmit>
			for(int i = 0; i < noroute_table_entries; i++){
 8001972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001974:	3301      	adds	r3, #1
 8001976:	677b      	str	r3, [r7, #116]	; 0x74
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <receive_packet_handler+0x2d0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001980:	4293      	cmp	r3, r2
 8001982:	dbca      	blt.n	800191a <receive_packet_handler+0x1fe>
 8001984:	e0b1      	b.n	8001aea <receive_packet_handler+0x3ce>
				}
			}
		} else if(pkt.receiver_id == my_id){	//forward it onward
 8001986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <receive_packet_handler+0x2bc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 80ac 	bne.w	8001aea <receive_packet_handler+0x3ce>
			int8_t route_idx = route_exists(pkt.destination_id);
 8001992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f921 	bl	8001bdc <route_exists>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			mesh_send_rrep(unicast_route_table[route_idx].next_hop_destination_id, pkt.destination_id, pkt.source_id, pkt.num_hops + 1, 0);  //pass it along
 80019a0:	f997 2071 	ldrsb.w	r2, [r7, #113]	; 0x71
 80019a4:	490d      	ldr	r1, [pc, #52]	; (80019dc <receive_packet_handler+0x2c0>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	330c      	adds	r3, #12
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019bc:	3301      	adds	r3, #1
 80019be:	b2dc      	uxtb	r4, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4623      	mov	r3, r4
 80019c6:	f7ff faaf 	bl	8000f28 <mesh_send_rrep>
 80019ca:	e08e      	b.n	8001aea <receive_packet_handler+0x3ce>
 80019cc:	08006af8 	.word	0x08006af8
 80019d0:	08006b14 	.word	0x08006b14
 80019d4:	08006b2c 	.word	0x08006b2c
 80019d8:	2000056c 	.word	0x2000056c
 80019dc:	20000130 	.word	0x20000130
 80019e0:	08006b3c 	.word	0x08006b3c
 80019e4:	08006b64 	.word	0x08006b64
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	200002b0 	.word	0x200002b0
 80019f0:	08006b88 	.word	0x08006b88
 80019f4:	20000370 	.word	0x20000370
 80019f8:	08006bcc 	.word	0x08006bcc
		}
	}
	else if (ptype == DATA_PACKET){
 80019fc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d16a      	bne.n	8001ada <receive_packet_handler+0x3be>
		DEBUG_PRINT("\tReceived Data Packet\n\r");
 8001a04:	483b      	ldr	r0, [pc, #236]	; (8001af4 <receive_packet_handler+0x3d8>)
 8001a06:	f000 fe2b 	bl	8002660 <DEBUG_PRINT>
		struct data_packet pkt;
		pkt = unpack_packet_data(packet_data, (plength-DATA_BASE_PKT_LEN), rx_data);
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	3b18      	subs	r3, #24
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a14:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <receive_packet_handler+0x3dc>)
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f7ff fcc2 	bl	80013a0 <unpack_packet_data>
		if(pkt.receiver_id == my_id){		//this is actually bad, but necessary for demo
 8001a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <receive_packet_handler+0x3e0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d10c      	bne.n	8001a40 <receive_packet_handler+0x324>
			update_route_table(pkt.source_id, 0, pkt.num_hops, pkt.transmitter_id);			//update my personal routing table with information about the transmitter and source
 8001a26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f000 f91a 	bl	8001c68 <update_route_table>
			update_route_table(pkt.transmitter_id, 0, 0, pkt.transmitter_id);
 8001a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f000 f914 	bl	8001c68 <update_route_table>
		}
		if(pkt.destination_id == my_id && pkt.receiver_id == my_id){
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <receive_packet_handler+0x3e0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d111      	bne.n	8001a6e <receive_packet_handler+0x352>
 8001a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <receive_packet_handler+0x3e0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10c      	bne.n	8001a6e <receive_packet_handler+0x352>
			DATA_RX_HANDLER(pkt);  				//Do something with the data
 8001a54:	466c      	mov	r4, sp
 8001a56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a68:	f7ff f8a0 	bl	8000bac <DATA_RX_HANDLER>
 8001a6c:	e03d      	b.n	8001aea <receive_packet_handler+0x3ce>
		} else if(pkt.receiver_id == my_id){
 8001a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a70:	4b22      	ldr	r3, [pc, #136]	; (8001afc <receive_packet_handler+0x3e0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d138      	bne.n	8001aea <receive_packet_handler+0x3ce>
			int8_t route_idx = route_exists(pkt.destination_id);
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f8ae 	bl	8001bdc <route_exists>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			if(route_idx != -1){
 8001a86:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d02c      	beq.n	8001aea <receive_packet_handler+0x3ce>
				struct unicast_route_table_entry route;
				route = unicast_route_table[route_idx];
 8001a90:	f997 2072 	ldrsb.w	r2, [r7, #114]	; 0x72
 8001a94:	491a      	ldr	r1, [pc, #104]	; (8001b00 <receive_packet_handler+0x3e4>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f107 040c 	add.w	r4, r7, #12
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aae:	e884 0003 	stmia.w	r4, {r0, r1}
				mesh_send_data(route.destination_id, route.destination_sequence_number, pkt.packet_data,
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	693c      	ldr	r4, [r7, #16]
 8001ab6:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8001ab8:	69be      	ldr	r6, [r7, #24]
						route.next_hop_destination_id, pkt.num_hops + 1, pkt.source_id, pkt.data_length);  //pass it along
 8001aba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
				mesh_send_data(route.destination_id, route.destination_sequence_number, pkt.packet_data,
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ac4:	f897 1039 	ldrb.w	r1, [r7, #57]	; 0x39
 8001ac8:	9102      	str	r1, [sp, #8]
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4633      	mov	r3, r6
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	f7ff f964 	bl	8000da0 <mesh_send_data>
 8001ad8:	e007      	b.n	8001aea <receive_packet_handler+0x3ce>
			}
		} //DO NOTHING, DROP PACKET
	}
	else {
		DEBUG_PRINT("Invalid Packet Type (data[0] = %d)\n\r", packet_data[0]);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <receive_packet_handler+0x3e8>)
 8001ae2:	f000 fdbd 	bl	8002660 <DEBUG_PRINT>
		return FAIL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <receive_packet_handler+0x3d0>
	}
	return SUCCESS;
 8001aea:	23ff      	movs	r3, #255	; 0xff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	377c      	adds	r7, #124	; 0x7c
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	08006bfc 	.word	0x08006bfc
 8001af8:	200003b4 	.word	0x200003b4
 8001afc:	2000056c 	.word	0x2000056c
 8001b00:	20000130 	.word	0x20000130
 8001b04:	08006c14 	.word	0x08006c14

08001b08 <packet_type>:

uint8_t packet_type(uint8_t packet_data[]){
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	switch(packet_data[0] & 0xFF){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d813      	bhi.n	8001b40 <packet_type+0x38>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <packet_type+0x18>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b3d 	.word	0x08001b3d
		case 0: return DATA_PACKET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e006      	b.n	8001b42 <packet_type+0x3a>
		case 1: return RREQ_PACKET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e004      	b.n	8001b42 <packet_type+0x3a>
		case 2: return RREP_PACKET;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e002      	b.n	8001b42 <packet_type+0x3a>
		case 3: return RERR_PACKET;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <packet_type+0x3a>
		default: return INVALID_PACKET;
 8001b40:	23f0      	movs	r3, #240	; 0xf0
	}
	return INVALID_PACKET;
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <rreq_table_append>:

uint8_t rreq_table_append(uint32_t rreq_id){
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	rreq_table[rreq_pointer] = rreq_id;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <rreq_table_append+0x40>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <rreq_table_append+0x44>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	rreq_pointer++;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <rreq_table_append+0x40>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <rreq_table_append+0x40>)
 8001b70:	701a      	strb	r2, [r3, #0]
	if(rreq_pointer >= RREQ_TABLE_MAX_ENTRIES) rreq_pointer = 0;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <rreq_table_append+0x40>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b09      	cmp	r3, #9
 8001b78:	d902      	bls.n	8001b80 <rreq_table_append+0x30>
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <rreq_table_append+0x40>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	return SUCCESS;
 8001b80:	23ff      	movs	r3, #255	; 0xff
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000011c 	.word	0x2000011c
 8001b94:	2000009c 	.word	0x2000009c

08001b98 <rreq_table_contains>:

uint8_t rreq_table_contains(uint32_t rreq_id){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < RREQ_TABLE_MAX_ENTRIES; i++){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e00e      	b.n	8001bc4 <rreq_table_contains+0x2c>
		if(rreq_table[i] == rreq_id) {
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <rreq_table_contains+0x3c>)
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d104      	bne.n	8001bbe <rreq_table_contains+0x26>
			DEBUG_PRINT("RREQ Already Seen\n\r");
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <rreq_table_contains+0x40>)
 8001bb6:	f000 fd53 	bl	8002660 <DEBUG_PRINT>
			return 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e006      	b.n	8001bcc <rreq_table_contains+0x34>
	for(uint8_t i = 0; i < RREQ_TABLE_MAX_ENTRIES; i++){
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	d9ed      	bls.n	8001ba6 <rreq_table_contains+0xe>
		}
	}
	return 0;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000009c 	.word	0x2000009c
 8001bd8:	08006c3c 	.word	0x08006c3c

08001bdc <route_exists>:

int8_t route_exists(uint32_t id){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("\tlooking for id=%d in unicast route table\n\r", id);
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	481c      	ldr	r0, [pc, #112]	; (8001c58 <route_exists+0x7c>)
 8001be8:	f000 fd3a 	bl	8002660 <DEBUG_PRINT>
	for(int i = 0; i < unicast_entries; i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e026      	b.n	8001c40 <route_exists+0x64>
		if(unicast_route_table[i].destination_id == id) {
 8001bf2:	491a      	ldr	r1, [pc, #104]	; (8001c5c <route_exists+0x80>)
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d118      	bne.n	8001c3a <route_exists+0x5e>
			DEBUG_PRINT("\tFound entry for id=%d, next node is %d\n\r", unicast_route_table[i].destination_id, unicast_route_table[i].next_hop_destination_id);
 8001c08:	4914      	ldr	r1, [pc, #80]	; (8001c5c <route_exists+0x80>)
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	4910      	ldr	r1, [pc, #64]	; (8001c5c <route_exists+0x80>)
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	330c      	adds	r3, #12
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <route_exists+0x84>)
 8001c30:	f000 fd16 	bl	8002660 <DEBUG_PRINT>
			return i;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	e009      	b.n	8001c4e <route_exists+0x72>
	for(int i = 0; i < unicast_entries; i++){
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <route_exists+0x88>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3d3      	bcc.n	8001bf2 <route_exists+0x16>
		}
	}
	return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08006c50 	.word	0x08006c50
 8001c5c:	20000130 	.word	0x20000130
 8001c60:	08006c7c 	.word	0x08006c7c
 8001c64:	200003ac 	.word	0x200003ac

08001c68 <update_route_table>:

uint8_t update_route_table(uint32_t dest_id, uint32_t dest_seq_num, uint8_t num_hops, uint32_t next_hop){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71fb      	strb	r3, [r7, #7]
	DEBUG_PRINT("checking to see if unicast table should be updated\n\r");
 8001c78:	4857      	ldr	r0, [pc, #348]	; (8001dd8 <update_route_table+0x170>)
 8001c7a:	f000 fcf1 	bl	8002660 <DEBUG_PRINT>

	//check the source
	int8_t source_idx = route_exists(dest_id);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff ffac 	bl	8001bdc <route_exists>
 8001c84:	4603      	mov	r3, r0
 8001c86:	75fb      	strb	r3, [r7, #23]
	if(source_idx == -1){
 8001c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d14a      	bne.n	8001d28 <update_route_table+0xc0>
		DEBUG_PRINT("\tSource node not found in table. Adding.\n\r");
 8001c92:	4852      	ldr	r0, [pc, #328]	; (8001ddc <update_route_table+0x174>)
 8001c94:	f000 fce4 	bl	8002660 <DEBUG_PRINT>
		//create a new unicast route table entry
		unicast_route_table[unicast_entries].destination_id = dest_id;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <update_route_table+0x178>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4951      	ldr	r1, [pc, #324]	; (8001de4 <update_route_table+0x17c>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	601a      	str	r2, [r3, #0]
		unicast_route_table[unicast_entries].destination_sequence_number = dest_seq_num;
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <update_route_table+0x178>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	494c      	ldr	r1, [pc, #304]	; (8001de4 <update_route_table+0x17c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	601a      	str	r2, [r3, #0]
		unicast_route_table[unicast_entries].hop_count = num_hops;
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <update_route_table+0x178>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	79f9      	ldrb	r1, [r7, #7]
 8001cc8:	4846      	ldr	r0, [pc, #280]	; (8001de4 <update_route_table+0x17c>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4403      	add	r3, r0
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	6019      	str	r1, [r3, #0]
		unicast_route_table[unicast_entries].next_hop_destination_id = next_hop;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <update_route_table+0x178>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4941      	ldr	r1, [pc, #260]	; (8001de4 <update_route_table+0x17c>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	330c      	adds	r3, #12
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	601a      	str	r2, [r3, #0]
		unicast_route_table[unicast_entries].precursor_nodes_destination_id_array = NULL;
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <update_route_table+0x178>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	493c      	ldr	r1, [pc, #240]	; (8001de4 <update_route_table+0x17c>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3310      	adds	r3, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
		unicast_route_table[unicast_entries].expiration_time = DEFAULT_ROUTE_EXPIRATION_TIME;
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <update_route_table+0x178>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4936      	ldr	r1, [pc, #216]	; (8001de4 <update_route_table+0x17c>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3314      	adds	r3, #20
 8001d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1a:	601a      	str	r2, [r3, #0]
		unicast_entries ++;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <update_route_table+0x178>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <update_route_table+0x178>)
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e051      	b.n	8001dcc <update_route_table+0x164>
	} else {
		if(unicast_route_table[source_idx].hop_count > num_hops){
 8001d28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d2c:	492d      	ldr	r1, [pc, #180]	; (8001de4 <update_route_table+0x17c>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3308      	adds	r3, #8
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d944      	bls.n	8001dcc <update_route_table+0x164>
			DEBUG_PRINT("\tSource route exists, but the new route is more efficient. Replacing.\n\r");
 8001d42:	4829      	ldr	r0, [pc, #164]	; (8001de8 <update_route_table+0x180>)
 8001d44:	f000 fc8c 	bl	8002660 <DEBUG_PRINT>
			//create a new unicast route table entry
			unicast_route_table[source_idx].destination_id = dest_id;
 8001d48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d4c:	4925      	ldr	r1, [pc, #148]	; (8001de4 <update_route_table+0x17c>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	601a      	str	r2, [r3, #0]
			unicast_route_table[source_idx].destination_sequence_number = dest_seq_num;
 8001d5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d60:	4920      	ldr	r1, [pc, #128]	; (8001de4 <update_route_table+0x17c>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	601a      	str	r2, [r3, #0]
			unicast_route_table[source_idx].hop_count = num_hops;
 8001d72:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d76:	79f9      	ldrb	r1, [r7, #7]
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <update_route_table+0x17c>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4403      	add	r3, r0
 8001d84:	3308      	adds	r3, #8
 8001d86:	6019      	str	r1, [r3, #0]
			unicast_route_table[source_idx].next_hop_destination_id = next_hop;
 8001d88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001d8c:	4915      	ldr	r1, [pc, #84]	; (8001de4 <update_route_table+0x17c>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	330c      	adds	r3, #12
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
			unicast_route_table[source_idx].precursor_nodes_destination_id_array = NULL;
 8001d9e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001da2:	4910      	ldr	r1, [pc, #64]	; (8001de4 <update_route_table+0x17c>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3310      	adds	r3, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
			unicast_route_table[source_idx].expiration_time = DEFAULT_ROUTE_EXPIRATION_TIME;
 8001db4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001db8:	490a      	ldr	r1, [pc, #40]	; (8001de4 <update_route_table+0x17c>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dca:	601a      	str	r2, [r3, #0]
		}
	}

	return SUCCESS;
 8001dcc:	23ff      	movs	r3, #255	; 0xff
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08006ca8 	.word	0x08006ca8
 8001ddc:	08006ce0 	.word	0x08006ce0
 8001de0:	200003ac 	.word	0x200003ac
 8001de4:	20000130 	.word	0x20000130
 8001de8:	08006d0c 	.word	0x08006d0c

08001dec <rand_delay>:

//0 - 49 ms delay
void rand_delay(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 fd43 	bl	800287c <HAL_Delay>
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <get_UID>:

uint32_t get_UID(){		//generates a unique 32 bit integer by hashing the unique device id
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
	uint32_t id1 = *((uint32_t*) 0x1FFF7A10);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <get_UID+0x30>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
	uint32_t id2 = *((uint32_t*) 0x1FFF7A14);
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <get_UID+0x34>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]
	uint32_t id3 = *((uint32_t*) 0x1FFF7A18);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <get_UID+0x38>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	607b      	str	r3, [r7, #4]
	return id1 ^ id2 ^ id3;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	405a      	eors	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4053      	eors	r3, r2
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	1fff7a10 	.word	0x1fff7a10
 8001e30:	1fff7a14 	.word	0x1fff7a14
 8001e34:	1fff7a18 	.word	0x1fff7a18

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_ADC_MspInit+0x3c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10d      	bne.n	8001eb6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_ADC_MspInit+0x40>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_ADC_MspInit+0x40>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_ADC_MspInit+0x40>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <HAL_RTC_MspInit+0x24>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d102      	bne.n	8001ee4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RTC_MspInit+0x28>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40002800 	.word	0x40002800
 8001ef4:	42470e3c 	.word	0x42470e3c

08001ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	; 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_SPI_MspInit+0x154>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12c      	bne.n	8001f74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	4b45      	ldr	r3, [pc, #276]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f52:	23e0      	movs	r3, #224	; 0xe0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f62:	2305      	movs	r3, #5
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4839      	ldr	r0, [pc, #228]	; (8002054 <HAL_SPI_MspInit+0x15c>)
 8001f6e:	f001 fc5d 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f72:	e066      	b.n	8002042 <HAL_SPI_MspInit+0x14a>
  else if(hspi->Instance==SPI2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a37      	ldr	r2, [pc, #220]	; (8002058 <HAL_SPI_MspInit+0x160>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d161      	bne.n	8002042 <HAL_SPI_MspInit+0x14a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_SPI_MspInit+0x158>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fb6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc8:	2305      	movs	r3, #5
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4822      	ldr	r0, [pc, #136]	; (800205c <HAL_SPI_MspInit+0x164>)
 8001fd4:	f001 fc2a 	bl	800382c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001fda:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_SPI_MspInit+0x16c>)
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_SPI_MspInit+0x168>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002016:	4812      	ldr	r0, [pc, #72]	; (8002060 <HAL_SPI_MspInit+0x168>)
 8002018:	f001 f8fe 	bl	8003218 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002022:	f7fe fdf7 	bl	8000c14 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_SPI_MspInit+0x168>)
 800202a:	649a      	str	r2, [r3, #72]	; 0x48
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <HAL_SPI_MspInit+0x168>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2024      	movs	r0, #36	; 0x24
 8002038:	f001 f8b7 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800203c:	2024      	movs	r0, #36	; 0x24
 800203e:	f001 f8d0 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40013000 	.word	0x40013000
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000
 8002058:	40003800 	.word	0x40003800
 800205c:	40020400 	.word	0x40020400
 8002060:	2000050c 	.word	0x2000050c
 8002064:	40026070 	.word	0x40026070

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_UART_MspInit+0x84>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d12b      	bne.n	80020e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x88>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0x88>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_UART_MspInit+0x88>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_UART_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d2:	2307      	movs	r3, #7
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <HAL_UART_MspInit+0x8c>)
 80020de:	f001 fba5 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020400 	.word	0x40020400

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 fb76 	bl	800283c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002158:	2001      	movs	r0, #1
 800215a:	f001 fd03 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <DMA1_Stream4_IRQHandler+0x10>)
 800216a:	f001 f925 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000050c 	.word	0x2000050c

08002178 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <SPI2_IRQHandler+0x10>)
 800217e:	f002 ff7f 	bl	8005080 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200000c4 	.word	0x200000c4

0800218c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002194:	f001 fce6 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <SX1276_Write_Register>:
#include "stm32f4xx.h"
#include <stdarg.h>
#include <stdio.h>

//SPI function mappings
uint8_t SX1276_Write_Register(uint8_t address, uint8_t data){
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	460a      	mov	r2, r1
 80021a6:	71fb      	strb	r3, [r7, #7]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_RESET);  //activate CS
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b2:	481d      	ldr	r0, [pc, #116]	; (8002228 <SX1276_Write_Register+0x8c>)
 80021b4:	f001 fcbc 	bl	8003b30 <HAL_GPIO_WritePin>
	uint8_t masked_address_buffer = address | 0x80;							//set write bit
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &masked_address_buffer, 1, 100);
 80021c2:	f107 010e 	add.w	r1, r7, #14
 80021c6:	2364      	movs	r3, #100	; 0x64
 80021c8:	2201      	movs	r2, #1
 80021ca:	4818      	ldr	r0, [pc, #96]	; (800222c <SX1276_Write_Register+0x90>)
 80021cc:	f002 fb79 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 80021d0:	bf00      	nop
 80021d2:	4816      	ldr	r0, [pc, #88]	; (800222c <SX1276_Write_Register+0x90>)
 80021d4:	f003 f85e 	bl	8005294 <HAL_SPI_GetState>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d1f9      	bne.n	80021d2 <SX1276_Write_Register+0x36>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80021de:	1db9      	adds	r1, r7, #6
 80021e0:	2364      	movs	r3, #100	; 0x64
 80021e2:	2201      	movs	r2, #1
 80021e4:	4811      	ldr	r0, [pc, #68]	; (800222c <SX1276_Write_Register+0x90>)
 80021e6:	f002 fb6c 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 80021ea:	bf00      	nop
 80021ec:	480f      	ldr	r0, [pc, #60]	; (800222c <SX1276_Write_Register+0x90>)
 80021ee:	f003 f851 	bl	8005294 <HAL_SPI_GetState>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d1f9      	bne.n	80021ec <SX1276_Write_Register+0x50>
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_SET);  //deactivate CS
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <SX1276_Write_Register+0x8c>)
 8002200:	f001 fc96 	bl	8003b30 <HAL_GPIO_WritePin>
	uint8_t newvalue = SX1276_Read_Register(address);
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f850 	bl	80022ac <SX1276_Read_Register>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
	if(newvalue == data) return SUCCESS;
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	429a      	cmp	r2, r3
 8002216:	d101      	bne.n	800221c <SX1276_Write_Register+0x80>
 8002218:	23ff      	movs	r3, #255	; 0xff
 800221a:	e000      	b.n	800221e <SX1276_Write_Register+0x82>
	//DEBUG_PRINT("Write to register 0x%X Failed. Target = 0x%X, Result = 0x%X\n\r", address, data, newvalue);
	return FAIL;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020000 	.word	0x40020000
 800222c:	200004b4 	.word	0x200004b4

08002230 <SX1276_Write_Burst>:

uint8_t SX1276_Write_Burst(uint8_t start_address, uint8_t data[], uint8_t len){
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_RESET);  //activate CS
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002246:	4817      	ldr	r0, [pc, #92]	; (80022a4 <SX1276_Write_Burst+0x74>)
 8002248:	f001 fc72 	bl	8003b30 <HAL_GPIO_WritePin>
	uint8_t masked_address_buffer = start_address | 0x80;							//set write bit
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &masked_address_buffer, 1, 100);
 8002256:	f107 010f 	add.w	r1, r7, #15
 800225a:	2364      	movs	r3, #100	; 0x64
 800225c:	2201      	movs	r2, #1
 800225e:	4812      	ldr	r0, [pc, #72]	; (80022a8 <SX1276_Write_Burst+0x78>)
 8002260:	f002 fb2f 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8002264:	bf00      	nop
 8002266:	4810      	ldr	r0, [pc, #64]	; (80022a8 <SX1276_Write_Burst+0x78>)
 8002268:	f003 f814 	bl	8005294 <HAL_SPI_GetState>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d1f9      	bne.n	8002266 <SX1276_Write_Burst+0x36>
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	b29a      	uxth	r2, r3
 8002276:	2364      	movs	r3, #100	; 0x64
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	480b      	ldr	r0, [pc, #44]	; (80022a8 <SX1276_Write_Burst+0x78>)
 800227c:	f002 fb21 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8002280:	bf00      	nop
 8002282:	4809      	ldr	r0, [pc, #36]	; (80022a8 <SX1276_Write_Burst+0x78>)
 8002284:	f003 f806 	bl	8005294 <HAL_SPI_GetState>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d1f9      	bne.n	8002282 <SX1276_Write_Burst+0x52>
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_SET);  //deactivate CS
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <SX1276_Write_Burst+0x74>)
 8002296:	f001 fc4b 	bl	8003b30 <HAL_GPIO_WritePin>
	return SUCCESS;
 800229a:	23ff      	movs	r3, #255	; 0xff
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40020000 	.word	0x40020000
 80022a8:	200004b4 	.word	0x200004b4

080022ac <SX1276_Read_Register>:

uint8_t SX1276_Read_Register(uint8_t address){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_RESET);  //activate CS
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022bc:	4814      	ldr	r0, [pc, #80]	; (8002310 <SX1276_Read_Register+0x64>)
 80022be:	f001 fc37 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80022c2:	1df9      	adds	r1, r7, #7
 80022c4:	2364      	movs	r3, #100	; 0x64
 80022c6:	2201      	movs	r2, #1
 80022c8:	4812      	ldr	r0, [pc, #72]	; (8002314 <SX1276_Read_Register+0x68>)
 80022ca:	f002 fafa 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 80022ce:	bf00      	nop
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <SX1276_Read_Register+0x68>)
 80022d2:	f002 ffdf 	bl	8005294 <HAL_SPI_GetState>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d1f9      	bne.n	80022d0 <SX1276_Read_Register+0x24>
	HAL_SPI_Receive(&hspi1, rxbuf, 1, 100);
 80022dc:	f107 010c 	add.w	r1, r7, #12
 80022e0:	2364      	movs	r3, #100	; 0x64
 80022e2:	2201      	movs	r2, #1
 80022e4:	480b      	ldr	r0, [pc, #44]	; (8002314 <SX1276_Read_Register+0x68>)
 80022e6:	f002 fc20 	bl	8004b2a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 80022ea:	bf00      	nop
 80022ec:	4809      	ldr	r0, [pc, #36]	; (8002314 <SX1276_Read_Register+0x68>)
 80022ee:	f002 ffd1 	bl	8005294 <HAL_SPI_GetState>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d1f9      	bne.n	80022ec <SX1276_Read_Register+0x40>
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_SET);  //deactivate CS
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <SX1276_Read_Register+0x64>)
 8002300:	f001 fc16 	bl	8003b30 <HAL_GPIO_WritePin>
	return rxbuf[0];
 8002304:	7b3b      	ldrb	r3, [r7, #12]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40020000 	.word	0x40020000
 8002314:	200004b4 	.word	0x200004b4

08002318 <SX1276_Read_Burst>:

uint8_t SX1276_Read_Burst(uint8_t start_address, uint8_t data[], uint8_t len){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_RESET);  //activate CS;
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <SX1276_Read_Burst+0x68>)
 8002330:	f001 fbfe 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &start_address, 1, 100);
 8002334:	1df9      	adds	r1, r7, #7
 8002336:	2364      	movs	r3, #100	; 0x64
 8002338:	2201      	movs	r2, #1
 800233a:	4812      	ldr	r0, [pc, #72]	; (8002384 <SX1276_Read_Burst+0x6c>)
 800233c:	f002 fac1 	bl	80048c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 8002340:	bf00      	nop
 8002342:	4810      	ldr	r0, [pc, #64]	; (8002384 <SX1276_Read_Burst+0x6c>)
 8002344:	f002 ffa6 	bl	8005294 <HAL_SPI_GetState>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d1f9      	bne.n	8002342 <SX1276_Read_Burst+0x2a>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	b29a      	uxth	r2, r3
 8002352:	2364      	movs	r3, #100	; 0x64
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	480b      	ldr	r0, [pc, #44]	; (8002384 <SX1276_Read_Burst+0x6c>)
 8002358:	f002 fbe7 	bl	8004b2a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
 800235c:	bf00      	nop
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <SX1276_Read_Burst+0x6c>)
 8002360:	f002 ff98 	bl	8005294 <HAL_SPI_GetState>
 8002364:	4603      	mov	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	d1f9      	bne.n	800235e <SX1276_Read_Burst+0x46>
	HAL_GPIO_WritePin(SX1276_CS_GPIO_Port, SX1276_CS_Pin, GPIO_PIN_SET);  //deactivate CS
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <SX1276_Read_Burst+0x68>)
 8002372:	f001 fbdd 	bl	8003b30 <HAL_GPIO_WritePin>
	return SUCCESS;
 8002376:	23ff      	movs	r3, #255	; 0xff
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40020000 	.word	0x40020000
 8002384:	200004b4 	.word	0x200004b4

08002388 <SX1276_Init>:

uint8_t SX1276_Init(uint8_t syncword, uint16_t preamblelength){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	460a      	mov	r2, r1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	4613      	mov	r3, r2
 8002396:	80bb      	strh	r3, [r7, #4]
	DEBUG_PRINT("\n\nInitializing SX1276!\n\r");
 8002398:	481f      	ldr	r0, [pc, #124]	; (8002418 <SX1276_Init+0x90>)
 800239a:	f000 f961 	bl	8002660 <DEBUG_PRINT>
	uint8_t result;
	result = SX1276_Set_Mode(SLEEP); //start from sleep mode
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f840 	bl	8002424 <SX1276_Set_Mode>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Write_Register(REG_OP_MODE, 0b10001000); //Turn on LoRa
 80023a8:	2188      	movs	r1, #136	; 0x88
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7ff fef6 	bl	800219c <SX1276_Write_Register>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	4013      	ands	r3, r2
 80023b8:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Enabling LoRa Mode\n\r");
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <SX1276_Init+0x94>)
 80023bc:	f000 f950 	bl	8002660 <DEBUG_PRINT>
	result &= SX1276_Set_Mode(STDBY); //go to standby mode
 80023c0:	2001      	movs	r0, #1
 80023c2:	f000 f82f 	bl	8002424 <SX1276_Set_Mode>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	4013      	ands	r3, r2
 80023ce:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Write_Register(REG_PA_CONFIG, 0b11001111); //use PA_BOOST pin
 80023d0:	21cf      	movs	r1, #207	; 0xcf
 80023d2:	2009      	movs	r0, #9
 80023d4:	f7ff fee2 	bl	800219c <SX1276_Write_Register>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	4013      	ands	r3, r2
 80023e0:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Enabling PA Boost\n\r");
 80023e2:	480f      	ldr	r0, [pc, #60]	; (8002420 <SX1276_Init+0x98>)
 80023e4:	f000 f93c 	bl	8002660 <DEBUG_PRINT>
	result &= SX1276_Set_Sync_Word(syncword);
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f83e 	bl	800246c <SX1276_Set_Sync_Word>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4013      	ands	r3, r2
 80023f8:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Set_Premble_Length(preamblelength);
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f84f 	bl	80024a0 <SX1276_Set_Premble_Length>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	4013      	ands	r3, r2
 800240a:	73fb      	strb	r3, [r7, #15]
	return result;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	08006d54 	.word	0x08006d54
 800241c:	08006d70 	.word	0x08006d70
 8002420:	08006d88 	.word	0x08006d88

08002424 <SX1276_Set_Mode>:

uint8_t SX1276_Set_Mode(uint8_t mode){
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
	uint8_t current_mode_reg_value = SX1276_Read_Register(REG_OP_MODE);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff ff3c 	bl	80022ac <SX1276_Read_Register>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Setting mode to %d\n\r", mode);
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	4619      	mov	r1, r3
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <SX1276_Set_Mode+0x44>)
 800243e:	f000 f90f 	bl	8002660 <DEBUG_PRINT>
	return SX1276_Write_Register(REG_OP_MODE, (current_mode_reg_value & 0xF8) | mode);
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	b25a      	sxtb	r2, r3
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4313      	orrs	r3, r2
 8002452:	b25b      	sxtb	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff fe9f 	bl	800219c <SX1276_Write_Register>
 800245e:	4603      	mov	r3, r0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	08006d9c 	.word	0x08006d9c

0800246c <SX1276_Set_Sync_Word>:

uint8_t SX1276_Set_Sync_Word(uint8_t syncword){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	SX1276_Set_Mode(STDBY); //go to standby mode
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff ffd4 	bl	8002424 <SX1276_Set_Mode>
	DEBUG_PRINT("Setting sync word to 0x%X\n\r", syncword);
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	4619      	mov	r1, r3
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <SX1276_Set_Sync_Word+0x30>)
 8002482:	f000 f8ed 	bl	8002660 <DEBUG_PRINT>
	return SX1276_Write_Register(REG_SYNC_WORD, syncword);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4619      	mov	r1, r3
 800248a:	2039      	movs	r0, #57	; 0x39
 800248c:	f7ff fe86 	bl	800219c <SX1276_Write_Register>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	08006db4 	.word	0x08006db4

080024a0 <SX1276_Set_Premble_Length>:

uint8_t SX1276_Set_Premble_Length(uint16_t len){
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
	SX1276_Set_Mode(STDBY); //go to standby mode
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7ff ffba 	bl	8002424 <SX1276_Set_Mode>
    if(len < 6) return(FAIL);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d801      	bhi.n	80024ba <SX1276_Set_Premble_Length+0x1a>
 80024b6:	2300      	movs	r3, #0
 80024b8:	e017      	b.n	80024ea <SX1276_Set_Premble_Length+0x4a>
	DEBUG_PRINT("Setting preamble length to %d bytes\n\r", len);
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4619      	mov	r1, r3
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <SX1276_Set_Premble_Length+0x54>)
 80024c0:	f000 f8ce 	bl	8002660 <DEBUG_PRINT>
	return (SX1276_Write_Register(REG_PREAMBLE_MSB, (uint8_t) (len >> 8)) |
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	2020      	movs	r0, #32
 80024d0:	f7ff fe64 	bl	800219c <SX1276_Write_Register>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
			SX1276_Write_Register(REG_SYNC_WORD, (uint8_t) (len & 0xFF)));
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	2039      	movs	r0, #57	; 0x39
 80024e0:	f7ff fe5c 	bl	800219c <SX1276_Write_Register>
 80024e4:	4603      	mov	r3, r0
	return (SX1276_Write_Register(REG_PREAMBLE_MSB, (uint8_t) (len >> 8)) |
 80024e6:	4323      	orrs	r3, r4
 80024e8:	b2db      	uxtb	r3, r3
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}
 80024f2:	bf00      	nop
 80024f4:	08006dd0 	.word	0x08006dd0

080024f8 <SX1276_Transmit_Blocking>:
	}
	//SX1276_Set_Mode(STDBY); //go to standby mode
	return SUCCESS;
}

uint8_t SX1276_Transmit_Blocking(uint8_t data[], uint8_t len){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
	rx_flag = 0;
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <SX1276_Transmit_Blocking+0xc8>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	result = SX1276_Set_Mode(STDBY); //go to standby mode
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff ff8a 	bl	8002424 <SX1276_Set_Mode>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
	DEBUG_PRINT("Transmitting %d bytes\n\r",len);
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	4619      	mov	r1, r3
 8002518:	482a      	ldr	r0, [pc, #168]	; (80025c4 <SX1276_Transmit_Blocking+0xcc>)
 800251a:	f000 f8a1 	bl	8002660 <DEBUG_PRINT>
	uint8_t reg_cur = SX1276_Read_Register(REG_DIO_MAPPING_1);
 800251e:	2040      	movs	r0, #64	; 0x40
 8002520:	f7ff fec4 	bl	80022ac <SX1276_Read_Register>
 8002524:	4603      	mov	r3, r0
 8002526:	73bb      	strb	r3, [r7, #14]
	SX1276_Write_Register(REG_DIO_MAPPING_1, (reg_cur & 0x3F) | 0x40); //set DIO mapping for DIO0 = TXDONE
 8002528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800252c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002536:	b25b      	sxtb	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	2040      	movs	r0, #64	; 0x40
 800253e:	f7ff fe2d 	bl	800219c <SX1276_Write_Register>
	SX1276_Write_Register(REG_IRQ_FLAGS, 0xFF); 	//clear interrupt flags, this will "fail" so it's not included in result
 8002542:	21ff      	movs	r1, #255	; 0xff
 8002544:	2012      	movs	r0, #18
 8002546:	f7ff fe29 	bl	800219c <SX1276_Write_Register>
	result &= SX1276_Write_Register(REG_PAYLOAD_LENGTH, len); //set packet length
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	4619      	mov	r1, r3
 800254e:	2022      	movs	r0, #34	; 0x22
 8002550:	f7ff fe24 	bl	800219c <SX1276_Write_Register>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	4013      	ands	r3, r2
 800255c:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Write_Register(REG_FIFO_TX_BASE_ADDR, SX127X_FIFO_TX_BASE_ADDR_MAX); //set FIFO pointers
 800255e:	2100      	movs	r1, #0
 8002560:	200e      	movs	r0, #14
 8002562:	f7ff fe1b 	bl	800219c <SX1276_Write_Register>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	4013      	ands	r3, r2
 800256e:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Write_Register(REG_FIFO_ADDR_PTR, SX127X_FIFO_TX_BASE_ADDR_MAX);
 8002570:	2100      	movs	r1, #0
 8002572:	200d      	movs	r0, #13
 8002574:	f7ff fe12 	bl	800219c <SX1276_Write_Register>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	4013      	ands	r3, r2
 8002580:	73fb      	strb	r3, [r7, #15]
	result &= SX1276_Write_Burst(REG_FIFO,data, len);	//write packet to FIFO
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	461a      	mov	r2, r3
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff fe51 	bl	8002230 <SX1276_Write_Burst>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	4013      	ands	r3, r2
 8002596:	73fb      	strb	r3, [r7, #15]
	//set RF switch --//TODO (maybe SX1276 does this on its own?)
	SX1276_Set_Mode(TX); //start transmitting, this will "fail" so it's not included in result
 8002598:	2003      	movs	r0, #3
 800259a:	f7ff ff43 	bl	8002424 <SX1276_Set_Mode>
	//start timer
	HAL_Delay(100);
 800259e:	2064      	movs	r0, #100	; 0x64
 80025a0:	f000 f96c 	bl	800287c <HAL_Delay>
	//while(!xdone_flag);	//wait for the transmit to finish			//TODO - add timeout
	xdone_flag = 0;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <SX1276_Transmit_Blocking+0xd0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	if(result == FAIL) DEBUG_PRINT("Transmit Failed\n\r");
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <SX1276_Transmit_Blocking+0xbe>
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <SX1276_Transmit_Blocking+0xd4>)
 80025b2:	f000 f855 	bl	8002660 <DEBUG_PRINT>
	return result;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000008d 	.word	0x2000008d
 80025c4:	08006df8 	.word	0x08006df8
 80025c8:	2000008c 	.word	0x2000008c
 80025cc:	08006e10 	.word	0x08006e10

080025d0 <SX1276_Start_Receive>:
	result &= SX1276_Read_Burst(REG_FIFO, data, len);
	result &= SX1276_Set_Mode(STDBY);
	return result;
}

uint8_t SX1276_Start_Receive(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	rx_flag = 1;
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <SX1276_Start_Receive+0x88>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
	DEBUG_PRINT("\n\rSTARTING RECEIVE\n\r");
 80025dc:	481f      	ldr	r0, [pc, #124]	; (800265c <SX1276_Start_Receive+0x8c>)
 80025de:	f000 f83f 	bl	8002660 <DEBUG_PRINT>
	uint8_t result = SX1276_Set_Mode(STDBY);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff ff1e 	bl	8002424 <SX1276_Set_Mode>
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cur = SX1276_Read_Register(REG_DIO_MAPPING_1);
 80025ec:	2040      	movs	r0, #64	; 0x40
 80025ee:	f7ff fe5d 	bl	80022ac <SX1276_Read_Register>
 80025f2:	4603      	mov	r3, r0
 80025f4:	71bb      	strb	r3, [r7, #6]
	result &= SX1276_Write_Register(REG_DIO_MAPPING_1, (reg_cur & 0x3F)); //set DIO mapping for for DIO0 = RXDONE
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	2040      	movs	r0, #64	; 0x40
 8002602:	f7ff fdcb 	bl	800219c <SX1276_Write_Register>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4013      	ands	r3, r2
 800260e:	71fb      	strb	r3, [r7, #7]
	SX1276_Write_Register(REG_IRQ_FLAGS, 0xFF); 	//clear interrupt flags
 8002610:	21ff      	movs	r1, #255	; 0xff
 8002612:	2012      	movs	r0, #18
 8002614:	f7ff fdc2 	bl	800219c <SX1276_Write_Register>
	result &= SX1276_Write_Register(REG_FIFO_RX_BASE_ADDR, SX127X_FIFO_RX_BASE_ADDR_MAX); //set FIFO pointers
 8002618:	2100      	movs	r1, #0
 800261a:	200f      	movs	r0, #15
 800261c:	f7ff fdbe 	bl	800219c <SX1276_Write_Register>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	4013      	ands	r3, r2
 8002628:	71fb      	strb	r3, [r7, #7]
	result &= SX1276_Write_Register(REG_FIFO_ADDR_PTR, SX127X_FIFO_RX_BASE_ADDR_MAX);
 800262a:	2100      	movs	r1, #0
 800262c:	200d      	movs	r0, #13
 800262e:	f7ff fdb5 	bl	800219c <SX1276_Write_Register>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4013      	ands	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
	result &= SX1276_Set_Mode(RXCONTINUOUS); //set mode to receive
 800263c:	2005      	movs	r0, #5
 800263e:	f7ff fef1 	bl	8002424 <SX1276_Set_Mode>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4013      	ands	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
	return result;
 800264c:	79fb      	ldrb	r3, [r7, #7]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000008d 	.word	0x2000008d
 800265c:	08006e24 	.word	0x08006e24

08002660 <DEBUG_PRINT>:
uint8_t SX1276_Configure_IT(){
	return SUCCESS;
}

//Debug functions  -- disable this here if you don't want uart coming out of the GPIO
void DEBUG_PRINT(char * format, ...){
 8002660:	b40f      	push	{r0, r1, r2, r3}
 8002662:	b580      	push	{r7, lr}
 8002664:	b0c2      	sub	sp, #264	; 0x108
 8002666:	af00      	add	r7, sp, #0
	char buffer[256];
	va_list args;
	va_start (args, format);
 8002668:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800266c:	463b      	mov	r3, r7
 800266e:	601a      	str	r2, [r3, #0]
	uint8_t stringsize = vsnprintf(buffer, 256, format, args);
 8002670:	463b      	mov	r3, r7
 8002672:	1d38      	adds	r0, r7, #4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	f003 fc9f 	bl	8005fc0 <vsniprintf>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	HAL_UART_Transmit(&huart1,(uint8_t *)buffer,stringsize, 100);
 8002688:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800268c:	b29a      	uxth	r2, r3
 800268e:	1d39      	adds	r1, r7, #4
 8002690:	2364      	movs	r3, #100	; 0x64
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <DEBUG_PRINT+0x48>)
 8002694:	f002 ff7f 	bl	8005596 <HAL_UART_Transmit>
	va_end (args);
}
 8002698:	bf00      	nop
 800269a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800269e:	46bd      	mov	sp, r7
 80026a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a4:	b004      	add	sp, #16
 80026a6:	4770      	bx	lr
 80026a8:	200002fc 	.word	0x200002fc

080026ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <_sbrk+0x5c>)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <_sbrk+0x60>)
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <_sbrk+0x64>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <_sbrk+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026dc:	f003 fbba 	bl	8005e54 <__errno>
 80026e0:	4602      	mov	r2, r0
 80026e2:	230c      	movs	r3, #12
 80026e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e009      	b.n	8002700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20010000 	.word	0x20010000
 800270c:	00000400 	.word	0x00000400
 8002710:	20000090 	.word	0x20000090
 8002714:	20000578 	.word	0x20000578

08002718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <SystemInit+0x28>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <SystemInit+0x28>)
 8002724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SystemInit+0x28>)
 800272e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002732:	609a      	str	r2, [r3, #8]
#endif
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800277c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800274a:	e003      	b.n	8002754 <LoopCopyDataInit>

0800274c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800274e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002752:	3104      	adds	r1, #4

08002754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800275a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800275c:	d3f6      	bcc.n	800274c <CopyDataInit>
  ldr  r2, =_sbss
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002760:	e002      	b.n	8002768 <LoopFillZerobss>

08002762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002764:	f842 3b04 	str.w	r3, [r2], #4

08002768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800276a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800276c:	d3f9      	bcc.n	8002762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800276e:	f7ff ffd3 	bl	8002718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002772:	f003 fb75 	bl	8005e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002776:	f7fd ff03 	bl	8000580 <main>
  bx  lr    
 800277a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800277c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002780:	08006ec4 	.word	0x08006ec4
  ldr  r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002788:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800278c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002790:	20000578 	.word	0x20000578

08002794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC_IRQHandler>
	...

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_Init+0x40>)
 80027a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_Init+0x40>)
 80027ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_Init+0x40>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c0:	2003      	movs	r0, #3
 80027c2:	f000 fce7 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 f808 	bl	80027dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027cc:	f7ff fb34 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_InitTick+0x54>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_InitTick+0x58>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fcff 	bl	80031fe <HAL_SYSTICK_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00e      	b.n	8002828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d80a      	bhi.n	8002826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	f000 fcc7 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_InitTick+0x5c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000000 	.word	0x20000000
 8002834:	20000008 	.word	0x20000008
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_IncTick+0x20>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_IncTick+0x24>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_IncTick+0x24>)
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000008 	.word	0x20000008
 8002860:	20000570 	.word	0x20000570

08002864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return uwTick;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_GetTick+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000570 	.word	0x20000570

0800287c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002884:	f7ff ffee 	bl	8002864 <HAL_GetTick>
 8002888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d005      	beq.n	80028a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_Delay+0x40>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a2:	bf00      	nop
 80028a4:	f7ff ffde 	bl	8002864 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d8f7      	bhi.n	80028a4 <HAL_Delay+0x28>
  {
  }
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000008 	.word	0x20000008

080028c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e033      	b.n	800293e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fad2 	bl	8001e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002906:	f023 0302 	bic.w	r3, r3, #2
 800290a:	f043 0202 	orr.w	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa72 	bl	8002dfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
 800292e:	e001      	b.n	8002934 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_Start+0x1a>
 800295e:	2302      	movs	r3, #2
 8002960:	e08a      	b.n	8002a78 <HAL_ADC_Start+0x130>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d018      	beq.n	80029aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <HAL_ADC_Start+0x13c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <HAL_ADC_Start+0x140>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0c9a      	lsrs	r2, r3, #18
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d15e      	bne.n	8002a76 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f6:	d106      	bne.n	8002a06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f023 0206 	bic.w	r2, r3, #6
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_ADC_Start+0x144>)
 8002a16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11c      	bne.n	8002a76 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	e013      	b.n	8002a76 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_ADC_Start+0x148>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10e      	bne.n	8002a76 <HAL_ADC_Start+0x12e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a74:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	20000000 	.word	0x20000000
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	40012300 	.word	0x40012300
 8002a90:	40012000 	.word	0x40012000

08002a94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d113      	bne.n	8002ada <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d10b      	bne.n	8002ada <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e05c      	b.n	8002b94 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ada:	f7ff fec3 	bl	8002864 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae0:	e01a      	b.n	8002b18 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d016      	beq.n	8002b18 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_ADC_PollForConversion+0x6c>
 8002af0:	f7ff feb8 	bl	8002864 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d20b      	bcs.n	8002b18 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03d      	b.n	8002b94 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d1dd      	bne.n	8002ae2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0212 	mvn.w	r2, #18
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d111      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e105      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x228>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	d925      	bls.n	8002c30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b1e      	subs	r3, #30
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43da      	mvns	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	400a      	ands	r2, r1
 8002c08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68d9      	ldr	r1, [r3, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4403      	add	r3, r0
 8002c22:	3b1e      	subs	r3, #30
 8002c24:	409a      	lsls	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	e022      	b.n	8002c76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	2207      	movs	r2, #7
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	400a      	ands	r2, r1
 8002c52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4618      	mov	r0, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4403      	add	r3, r0
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d824      	bhi.n	8002cc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b05      	subs	r3, #5
 8002c90:	221f      	movs	r2, #31
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b05      	subs	r3, #5
 8002cba:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	e04c      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d824      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b23      	subs	r3, #35	; 0x23
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	400a      	ands	r2, r1
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b23      	subs	r3, #35	; 0x23
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
 8002d18:	e023      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b41      	subs	r3, #65	; 0x41
 8002d2c:	221f      	movs	r2, #31
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	400a      	ands	r2, r1
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3b41      	subs	r3, #65	; 0x41
 8002d56:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_ADC_ConfigChannel+0x234>)
 8002d64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <HAL_ADC_ConfigChannel+0x238>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1cc>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_ADC_ConfigChannel+0x238>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d123      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x21e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d003      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x1e6>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b11      	cmp	r3, #17
 8002d9c:	d11b      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d111      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_ADC_ConfigChannel+0x23c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_ADC_ConfigChannel+0x240>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	0c9a      	lsrs	r2, r3, #18
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dc8:	e002      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f9      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40012300 	.word	0x40012300
 8002df0:	40012000 	.word	0x40012000
 8002df4:	20000000 	.word	0x20000000
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e04:	4b79      	ldr	r3, [pc, #484]	; (8002fec <ADC_Init+0x1f0>)
 8002e06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <ADC_Init+0x1f4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ea2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	e00f      	b.n	8002efa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0202 	bic.w	r2, r2, #2
 8002f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
 8002f14:	005a      	lsls	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	3b01      	subs	r3, #1
 8002f54:	035a      	lsls	r2, r3, #13
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	e007      	b.n	8002f70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	051a      	lsls	r2, r3, #20
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb2:	025a      	lsls	r2, r3, #9
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	029a      	lsls	r2, r3, #10
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	0f000001 	.word	0x0f000001

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff29 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff3e 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff8e 	bl	80030e8 <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5d 	bl	8003094 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff31 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff fb1e 	bl	8002864 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e099      	b.n	8003368 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003254:	e00f      	b.n	8003276 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003256:	f7ff fb05 	bl	8002864 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b05      	cmp	r3, #5
 8003262:	d908      	bls.n	8003276 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2203      	movs	r2, #3
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e078      	b.n	8003368 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e8      	bne.n	8003256 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_DMA_Init+0x158>)
 8003290:	4013      	ands	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d107      	bne.n	80032e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4313      	orrs	r3, r2
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b04      	cmp	r3, #4
 8003308:	d117      	bne.n	800333a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa0b 	bl	8003738 <DMA_CheckFifoParam>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003336:	2301      	movs	r3, #1
 8003338:	e016      	b.n	8003368 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9c2 	bl	80036cc <DMA_CalcBaseAndBitshift>
 8003348:	4603      	mov	r3, r0
 800334a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	223f      	movs	r2, #63	; 0x3f
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	f010803f 	.word	0xf010803f

08003374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e00c      	b.n	80033ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <HAL_DMA_IRQHandler+0x258>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a92      	ldr	r2, [pc, #584]	; (8003614 <HAL_DMA_IRQHandler+0x25c>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2204      	movs	r2, #4
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	2204      	movs	r2, #4
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	2210      	movs	r2, #16
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	2210      	movs	r2, #16
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e01f      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e016      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2220      	movs	r2, #32
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808e 	beq.w	8003656 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8086 	beq.w	8003656 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2220      	movs	r2, #32
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d136      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0216 	bic.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_DMA_IRQHandler+0x1da>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	223f      	movs	r2, #63	; 0x3f
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07d      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
        }
        return;
 80035ce:	e078      	b.n	80036c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d030      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e02b      	b.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d027      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e022      	b.n	8003656 <HAL_DMA_IRQHandler+0x29e>
 8003610:	20000000 	.word	0x20000000
 8003614:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d032      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2205      	movs	r2, #5
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	429a      	cmp	r2, r3
 800368c:	d307      	bcc.n	800369e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f2      	bne.n	8003682 <HAL_DMA_IRQHandler+0x2ca>
 800369c:	e000      	b.n	80036a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800369e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e000      	b.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036c2:	bf00      	nop
    }
  }
}
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop

080036cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3b10      	subs	r3, #16
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <DMA_CalcBaseAndBitshift+0x64>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d909      	bls.n	800370e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	; 0x58
 800370c:	e007      	b.n	800371e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	aaaaaaab 	.word	0xaaaaaaab
 8003734:	08006e78 	.word	0x08006e78

08003738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11f      	bne.n	8003792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d855      	bhi.n	8003804 <DMA_CheckFifoParam+0xcc>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <DMA_CheckFifoParam+0x28>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003771 	.word	0x08003771
 8003764:	08003783 	.word	0x08003783
 8003768:	08003771 	.word	0x08003771
 800376c:	08003805 	.word	0x08003805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d045      	beq.n	8003808 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e042      	b.n	8003808 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378a:	d13f      	bne.n	800380c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e03c      	b.n	800380c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379a:	d121      	bne.n	80037e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d836      	bhi.n	8003810 <DMA_CheckFifoParam+0xd8>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x70>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037bf 	.word	0x080037bf
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	080037d1 	.word	0x080037d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      break;
 80037bc:	e02f      	b.n	800381e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d024      	beq.n	8003814 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e021      	b.n	8003814 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d8:	d11e      	bne.n	8003818 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037de:	e01b      	b.n	8003818 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d902      	bls.n	80037ec <DMA_CheckFifoParam+0xb4>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d003      	beq.n	80037f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ea:	e018      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e015      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e00b      	b.n	800381c <DMA_CheckFifoParam+0xe4>
      break;
 8003804:	bf00      	nop
 8003806:	e00a      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 8003808:	bf00      	nop
 800380a:	e008      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 800380c:	bf00      	nop
 800380e:	e006      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 8003810:	bf00      	nop
 8003812:	e004      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 8003814:	bf00      	nop
 8003816:	e002      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;   
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <DMA_CheckFifoParam+0xe6>
      break;
 800381c:	bf00      	nop
    }
  } 
  
  return status; 
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d00b      	beq.n	8003886 <HAL_GPIO_Init+0x5a>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d007      	beq.n	8003886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800387a:	2b11      	cmp	r3, #17
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b12      	cmp	r3, #18
 8003884:	d130      	bne.n	80038e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 0201 	and.w	r2, r3, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0xfc>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b12      	cmp	r3, #18
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_GPIO_Init+0x2e4>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a55      	ldr	r2, [pc, #340]	; (8003b10 <HAL_GPIO_Init+0x2e4>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_GPIO_Init+0x2e4>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a48      	ldr	r2, [pc, #288]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a46      	ldr	r2, [pc, #280]	; (8003b20 <HAL_GPIO_Init+0x2f4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a44      	ldr	r2, [pc, #272]	; (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4934      	ldr	r1, [pc, #208]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a78:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	3724      	adds	r7, #36	; 0x24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020800 	.word	0x40020800
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc ffe2 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e25b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e236      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fe0a 	bl	8002864 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fe06 	bl	8002864 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1fb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fdf6 	bl	8002864 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fdf2 	bl	8002864 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1e7      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1bb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fdab 	bl	8002864 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe fda7 	bl	8002864 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e19c      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fd8a 	bl	8002864 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fe fd86 	bl	8002864 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e17b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fd6a 	bl	8002864 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fe fd66 	bl	8002864 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e15b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fe fd53 	bl	8002864 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fd4f 	bl	8002864 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e144      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fd15 	bl	8002864 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fe fd08 	bl	8002864 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0fd      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a76      	ldr	r2, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b71      	ldr	r3, [pc, #452]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a70      	ldr	r2, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a6d      	ldr	r2, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fccd 	bl	8002864 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fcc9 	bl	8002864 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0bc      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b61      	ldr	r3, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fcb7 	bl	8002864 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fe fcb3 	bl	8002864 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0a6      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8092 	beq.w	800405c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d05c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d141      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fe fc87 	bl	8002864 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe fc83 	bl	8002864 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e078      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	4933      	ldr	r1, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fc5c 	bl	8002864 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe fc58 	bl	8002864 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04d      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
 8003fce:	e045      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fc45 	bl	8002864 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fc41 	bl	8002864 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x44a>
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e029      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	429a      	cmp	r2, r3
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d115      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004038:	4293      	cmp	r3, r2
 800403a:	d10d      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000
 800406c:	40023800 	.word	0x40023800
 8004070:	42470060 	.word	0x42470060

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fe fb7e 	bl	8002864 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fe fb7a 	bl	8002864 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	fa21 f303 	lsr.w	r3, r1, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fade 	bl	80027dc <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	08006e60 	.word	0x08006e60
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d007      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x32>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d008      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x38>
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80b4 	bne.w	80043d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800426e:	60bb      	str	r3, [r7, #8]
       break;
 8004270:	e0b3      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e0b0      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04a      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	ea03 0501 	and.w	r5, r3, r1
 80042a4:	ea04 0602 	and.w	r6, r4, r2
 80042a8:	4629      	mov	r1, r5
 80042aa:	4632      	mov	r2, r6
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0154      	lsls	r4, r2, #5
 80042b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ba:	014b      	lsls	r3, r1, #5
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	1b49      	subs	r1, r1, r5
 80042c2:	eb62 0206 	sbc.w	r2, r2, r6
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0194      	lsls	r4, r2, #6
 80042d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	1a5b      	subs	r3, r3, r1
 80042d8:	eb64 0402 	sbc.w	r4, r4, r2
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ea:	00d9      	lsls	r1, r3, #3
 80042ec:	460b      	mov	r3, r1
 80042ee:	4614      	mov	r4, r2
 80042f0:	195b      	adds	r3, r3, r5
 80042f2:	eb44 0406 	adc.w	r4, r4, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	02a2      	lsls	r2, r4, #10
 8004300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004304:	0299      	lsls	r1, r3, #10
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ffb2 	bl	8000280 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e049      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	ea03 0501 	and.w	r5, r3, r1
 800433a:	ea04 0602 	and.w	r6, r4, r2
 800433e:	4629      	mov	r1, r5
 8004340:	4632      	mov	r2, r6
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	0154      	lsls	r4, r2, #5
 800434c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004350:	014b      	lsls	r3, r1, #5
 8004352:	4619      	mov	r1, r3
 8004354:	4622      	mov	r2, r4
 8004356:	1b49      	subs	r1, r1, r5
 8004358:	eb62 0206 	sbc.w	r2, r2, r6
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	0194      	lsls	r4, r2, #6
 8004366:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	1a5b      	subs	r3, r3, r1
 800436e:	eb64 0402 	sbc.w	r4, r4, r2
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	460b      	mov	r3, r1
 8004384:	4614      	mov	r4, r2
 8004386:	195b      	adds	r3, r3, r5
 8004388:	eb44 0406 	adc.w	r4, r4, r6
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	02a2      	lsls	r2, r4, #10
 8004396:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800439a:	0299      	lsls	r1, r3, #10
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	4621      	mov	r1, r4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	461a      	mov	r2, r3
 80043ac:	4623      	mov	r3, r4
 80043ae:	f7fb ff67 	bl	8000280 <__aeabi_uldivmod>
 80043b2:	4603      	mov	r3, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4601      	mov	r1, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08006e70 	.word	0x08006e70

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004430:	f7ff ffdc 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004434:	4601      	mov	r1, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0b5b      	lsrs	r3, r3, #13
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08006e70 	.word	0x08006e70

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004478:	2b00      	cmp	r3, #0
 800447a:	d035      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800447c:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004482:	f7fe f9ef 	bl	8002864 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800448a:	f7fe f9eb 	bl	8002864 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0ba      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800449c:	4b60      	ldr	r3, [pc, #384]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	019a      	lsls	r2, r3, #6
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	071b      	lsls	r3, r3, #28
 80044b4:	495a      	ldr	r1, [pc, #360]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044bc:	4b57      	ldr	r3, [pc, #348]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fe f9cf 	bl	8002864 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ca:	f7fe f9cb 	bl	8002864 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e09a      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8083 	beq.w	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	4b49      	ldr	r3, [pc, #292]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	4a48      	ldr	r2, [pc, #288]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	6413      	str	r3, [r2, #64]	; 0x40
 8004506:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a43      	ldr	r2, [pc, #268]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800451e:	f7fe f9a1 	bl	8002864 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004526:	f7fe f99d 	bl	8002864 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e06c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004538:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004544:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d028      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800456c:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004572:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004578:	4a29      	ldr	r2, [pc, #164]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d114      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800458a:	f7fe f96b 	bl	8002864 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe f967 	bl	8002864 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e034      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c0:	d10d      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	4912      	ldr	r1, [pc, #72]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	608b      	str	r3, [r1, #8]
 80045dc:	e005      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045e8:	6093      	str	r3, [r2, #8]
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f6:	490a      	ldr	r1, [pc, #40]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7c1a      	ldrb	r2, [r3, #16]
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800460e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	42470068 	.word	0x42470068
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	42470e40 	.word	0x42470e40
 800462c:	424711e0 	.word	0x424711e0

08004630 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e083      	b.n	800474a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	7f5b      	ldrb	r3, [r3, #29]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fc3a 	bl	8001ecc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ca      	movs	r2, #202	; 0xca
 8004664:	625a      	str	r2, [r3, #36]	; 0x24
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2253      	movs	r2, #83	; 0x53
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f897 	bl	80047a2 <RTC_EnterInitMode>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2204      	movs	r2, #4
 8004686:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e05e      	b.n	800474a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68d2      	ldr	r2, [r2, #12]
 80046c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6919      	ldr	r1, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	041a      	lsls	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10e      	bne.n	8004718 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f829 	bl	8004752 <HAL_RTC_WaitForSynchro>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	22ff      	movs	r2, #255	; 0xff
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2204      	movs	r2, #4
 8004712:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e018      	b.n	800474a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	22ff      	movs	r2, #255	; 0xff
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004748:	2300      	movs	r3, #0
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800476c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800476e:	f7fe f879 	bl	8002864 <HAL_GetTick>
 8004772:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004774:	e009      	b.n	800478a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004776:	f7fe f875 	bl	8002864 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004784:	d901      	bls.n	800478a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e007      	b.n	800479a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ee      	beq.n	8004776 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d119      	bne.n	80047f0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047c6:	f7fe f84d 	bl	8002864 <HAL_GetTick>
 80047ca:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80047cc:	e009      	b.n	80047e2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80047ce:	f7fe f849 	bl	8002864 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047dc:	d901      	bls.n	80047e2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e007      	b.n	80047f2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ee      	beq.n	80047ce <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e056      	b.n	80048ba <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd fb66 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f003 0104 	and.w	r1, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b088      	sub	sp, #32
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_SPI_Transmit+0x22>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e11e      	b.n	8004b22 <HAL_SPI_Transmit+0x260>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ec:	f7fd ffba 	bl	8002864 <HAL_GetTick>
 80048f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d002      	beq.n	8004908 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004902:	2302      	movs	r3, #2
 8004904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004906:	e103      	b.n	8004b10 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Transmit+0x52>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004918:	e0fa      	b.n	8004b10 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004960:	d107      	bne.n	8004972 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d14b      	bne.n	8004a32 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0xe6>
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d13e      	bne.n	8004a26 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049cc:	e02b      	b.n	8004a26 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d112      	bne.n	8004a02 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fd ff2f 	bl	8002864 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x158>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x15e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a24:	e074      	b.n	8004b10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ce      	bne.n	80049ce <HAL_SPI_Transmit+0x10c>
 8004a30:	e04c      	b.n	8004acc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Transmit+0x17e>
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d140      	bne.n	8004ac2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a66:	e02c      	b.n	8004ac2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d113      	bne.n	8004a9e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a9c:	e011      	b.n	8004ac2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9e:	f7fd fee1 	bl	8002864 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d803      	bhi.n	8004ab6 <HAL_SPI_Transmit+0x1f4>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d102      	bne.n	8004abc <HAL_SPI_Transmit+0x1fa>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac0:	e026      	b.n	8004b10 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1cd      	bne.n	8004a68 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fcd1 	bl	8005478 <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e000      	b.n	8004b10 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10e      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2204      	movs	r2, #4
 8004b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f8e9 	bl	8004d3c <HAL_SPI_TransmitReceive>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	e0e2      	b.n	8004d34 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Receive+0x52>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0db      	b.n	8004d34 <HAL_SPI_Receive+0x20a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fd fe6e 	bl	8002864 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9a:	e0c2      	b.n	8004d22 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Receive+0x7e>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bac:	e0b9      	b.n	8004d22 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf4:	d107      	bne.n	8004c06 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d007      	beq.n	8004c24 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d162      	bne.n	8004cf2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c2c:	e02e      	b.n	8004c8c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d115      	bne.n	8004c68 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f103 020c 	add.w	r2, r3, #12
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c66:	e011      	b.n	8004c8c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c68:	f7fd fdfc 	bl	8002864 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d803      	bhi.n	8004c80 <HAL_SPI_Receive+0x156>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Receive+0x15c>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c8a:	e04a      	b.n	8004d22 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cb      	bne.n	8004c2e <HAL_SPI_Receive+0x104>
 8004c96:	e031      	b.n	8004cfc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d113      	bne.n	8004cce <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ccc:	e011      	b.n	8004cf2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fd fdc9 	bl	8002864 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Receive+0x1bc>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x1c2>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cf0:	e017      	b.n	8004d22 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1cd      	bne.n	8004c98 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fb53 	bl	80053ac <SPI_EndRxTransaction>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
 8004d1e:	e000      	b.n	8004d22 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	; 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x26>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e18a      	b.n	8005078 <HAL_SPI_TransmitReceive+0x33c>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fd fd7b 	bl	8002864 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d80:	887b      	ldrh	r3, [r7, #2]
 8004d82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d00f      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x70>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d107      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x68>
 8004d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004daa:	e15b      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x82>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x82>
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dc4:	e14e      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	887a      	ldrh	r2, [r7, #2]
 8004dea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	887a      	ldrh	r2, [r7, #2]
 8004e02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d007      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e36:	d178      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x10a>
 8004e40:	8b7b      	ldrh	r3, [r7, #26]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d166      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6a:	e053      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d11b      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d113      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d119      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1b8>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ef4:	f7fd fcb6 	bl	8002864 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d807      	bhi.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f12:	e0a7      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1a6      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x130>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1a1      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x130>
 8004f28:	e07c      	b.n	8005024 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x1fc>
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d16b      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5e:	e057      	b.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d017      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d114      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d119      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x2ae>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d014      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fea:	f7fd fc3b 	bl	8002864 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_TransmitReceive+0x2c6>
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d102      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x2cc>
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800500e:	e029      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1a2      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x224>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d19d      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fa25 	bl	8005478 <SPI_EndRxTxTransaction>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005040:	e010      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	e000      	b.n	8005064 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005078:	4618      	mov	r0, r3
 800507a:	3730      	adds	r7, #48	; 0x30
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	099b      	lsrs	r3, r3, #6
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
    return;
 80050c2:	e0d8      	b.n	8005276 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_SPI_IRQHandler+0x66>
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	09db      	lsrs	r3, r3, #7
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    return;
 80050e4:	e0c7      	b.n	8005276 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <HAL_SPI_IRQHandler+0x8c>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80b5 	beq.w	8005276 <HAL_SPI_IRQHandler+0x1f6>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80ae 	beq.w	8005276 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d023      	beq.n	800516e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b03      	cmp	r3, #3
 8005130:	d011      	beq.n	8005156 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	e00b      	b.n	800516e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
        return;
 800516c:	e083      	b.n	8005276 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0208 	orr.w	r2, r3, #8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051bc:	2300      	movs	r3, #0
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d050      	beq.n	8005274 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_SPI_IRQHandler+0x17e>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d034      	beq.n	8005268 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0203 	bic.w	r2, r2, #3
 800520c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d011      	beq.n	800523a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <HAL_SPI_IRQHandler+0x1fc>)
 800521c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe f8a6 	bl	8003374 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_SPI_IRQHandler+0x1fc>)
 8005248:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe f890 	bl	8003374 <HAL_DMA_Abort_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005266:	e003      	b.n	8005270 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f809 	bl	8005280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800526e:	e000      	b.n	8005272 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005270:	bf00      	nop
    return;
 8005272:	bf00      	nop
 8005274:	bf00      	nop
  }
}
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	080052b1 	.word	0x080052b1

08005280 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a2:	b2db      	uxtb	r3, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff ffd8 	bl	8005280 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052e8:	e04c      	b.n	8005384 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d048      	beq.n	8005384 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052f2:	f7fd fab7 	bl	8002864 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d902      	bls.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13d      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005320:	d111      	bne.n	8005346 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532a:	d004      	beq.n	8005336 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d107      	bne.n	8005346 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534e:	d10f      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800536e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e00f      	b.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1a3      	bne.n	80052ea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c0:	d111      	bne.n	80053e6 <SPI_EndRxTransaction+0x3a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ca:	d004      	beq.n	80053d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d107      	bne.n	80053e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ee:	d12a      	bne.n	8005446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d012      	beq.n	8005420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2200      	movs	r2, #0
 8005402:	2180      	movs	r1, #128	; 0x80
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff ff67 	bl	80052d8 <SPI_WaitFlagStateUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02d      	beq.n	800546c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f043 0220 	orr.w	r2, r3, #32
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e026      	b.n	800546e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	2101      	movs	r1, #1
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff54 	bl	80052d8 <SPI_WaitFlagStateUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01a      	beq.n	800546c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f043 0220 	orr.w	r2, r3, #32
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e013      	b.n	800546e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	2101      	movs	r1, #1
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff ff41 	bl	80052d8 <SPI_WaitFlagStateUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e000      	b.n	800546e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <SPI_EndRxTxTransaction+0x7c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <SPI_EndRxTxTransaction+0x80>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0d5b      	lsrs	r3, r3, #21
 8005490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005494:	fb02 f303 	mul.w	r3, r2, r3
 8005498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a2:	d112      	bne.n	80054ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ff12 	bl	80052d8 <SPI_WaitFlagStateUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e00f      	b.n	80054ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d0f2      	beq.n	80054ca <SPI_EndRxTxTransaction+0x52>
 80054e4:	e000      	b.n	80054e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80054e6:	bf00      	nop
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000000 	.word	0x20000000
 80054f8:	165e9f81 	.word	0x165e9f81

080054fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03f      	b.n	800558e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fc fda0 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2224      	movs	r2, #36	; 0x24
 800552c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f90b 	bl	800575c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b088      	sub	sp, #32
 800559a:	af02      	add	r7, sp, #8
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	f040 8083 	bne.w	80056be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Transmit+0x2e>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e07b      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Transmit+0x40>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e074      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2221      	movs	r2, #33	; 0x21
 80055e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80055ec:	f7fd f93a 	bl	8002864 <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005606:	e042      	b.n	800568e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	d122      	bne.n	8005666 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f84c 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e042      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3302      	adds	r3, #2
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	e017      	b.n	800568e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3301      	adds	r3, #1
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	e013      	b.n	800568e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f829 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e01f      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	60ba      	str	r2, [r7, #8]
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1b7      	bne.n	8005608 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f810 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e006      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d8:	e02c      	b.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d028      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e8:	f7fd f8bc 	bl	8002864 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d21d      	bcs.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005706:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0201 	bic.w	r2, r2, #1
 8005716:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e00f      	b.n	8005754 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	429a      	cmp	r2, r3
 8005750:	d0c3      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800579e:	f023 030c 	bic.w	r3, r3, #12
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	430b      	orrs	r3, r1
 80057aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	f040 818b 	bne.w	8005ae4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4ac1      	ldr	r2, [pc, #772]	; (8005ad8 <UART_SetConfig+0x37c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d005      	beq.n	80057e4 <UART_SetConfig+0x88>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4abf      	ldr	r2, [pc, #764]	; (8005adc <UART_SetConfig+0x380>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f040 80bd 	bne.w	800595e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7fe fe22 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 80057e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	461d      	mov	r5, r3
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	46a8      	mov	r8, r5
 80057f4:	46b1      	mov	r9, r6
 80057f6:	eb18 0308 	adds.w	r3, r8, r8
 80057fa:	eb49 0409 	adc.w	r4, r9, r9
 80057fe:	4698      	mov	r8, r3
 8005800:	46a1      	mov	r9, r4
 8005802:	eb18 0805 	adds.w	r8, r8, r5
 8005806:	eb49 0906 	adc.w	r9, r9, r6
 800580a:	f04f 0100 	mov.w	r1, #0
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005816:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800581a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800581e:	4688      	mov	r8, r1
 8005820:	4691      	mov	r9, r2
 8005822:	eb18 0005 	adds.w	r0, r8, r5
 8005826:	eb49 0106 	adc.w	r1, r9, r6
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	461d      	mov	r5, r3
 8005830:	f04f 0600 	mov.w	r6, #0
 8005834:	196b      	adds	r3, r5, r5
 8005836:	eb46 0406 	adc.w	r4, r6, r6
 800583a:	461a      	mov	r2, r3
 800583c:	4623      	mov	r3, r4
 800583e:	f7fa fd1f 	bl	8000280 <__aeabi_uldivmod>
 8005842:	4603      	mov	r3, r0
 8005844:	460c      	mov	r4, r1
 8005846:	461a      	mov	r2, r3
 8005848:	4ba5      	ldr	r3, [pc, #660]	; (8005ae0 <UART_SetConfig+0x384>)
 800584a:	fba3 2302 	umull	r2, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	461d      	mov	r5, r3
 8005858:	f04f 0600 	mov.w	r6, #0
 800585c:	46a9      	mov	r9, r5
 800585e:	46b2      	mov	sl, r6
 8005860:	eb19 0309 	adds.w	r3, r9, r9
 8005864:	eb4a 040a 	adc.w	r4, sl, sl
 8005868:	4699      	mov	r9, r3
 800586a:	46a2      	mov	sl, r4
 800586c:	eb19 0905 	adds.w	r9, r9, r5
 8005870:	eb4a 0a06 	adc.w	sl, sl, r6
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005888:	4689      	mov	r9, r1
 800588a:	4692      	mov	sl, r2
 800588c:	eb19 0005 	adds.w	r0, r9, r5
 8005890:	eb4a 0106 	adc.w	r1, sl, r6
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	461d      	mov	r5, r3
 800589a:	f04f 0600 	mov.w	r6, #0
 800589e:	196b      	adds	r3, r5, r5
 80058a0:	eb46 0406 	adc.w	r4, r6, r6
 80058a4:	461a      	mov	r2, r3
 80058a6:	4623      	mov	r3, r4
 80058a8:	f7fa fcea 	bl	8000280 <__aeabi_uldivmod>
 80058ac:	4603      	mov	r3, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b8b      	ldr	r3, [pc, #556]	; (8005ae0 <UART_SetConfig+0x384>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a86      	ldr	r2, [pc, #536]	; (8005ae0 <UART_SetConfig+0x384>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058d4:	4498      	add	r8, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	461d      	mov	r5, r3
 80058da:	f04f 0600 	mov.w	r6, #0
 80058de:	46a9      	mov	r9, r5
 80058e0:	46b2      	mov	sl, r6
 80058e2:	eb19 0309 	adds.w	r3, r9, r9
 80058e6:	eb4a 040a 	adc.w	r4, sl, sl
 80058ea:	4699      	mov	r9, r3
 80058ec:	46a2      	mov	sl, r4
 80058ee:	eb19 0905 	adds.w	r9, r9, r5
 80058f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800590a:	4689      	mov	r9, r1
 800590c:	4692      	mov	sl, r2
 800590e:	eb19 0005 	adds.w	r0, r9, r5
 8005912:	eb4a 0106 	adc.w	r1, sl, r6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	461d      	mov	r5, r3
 800591c:	f04f 0600 	mov.w	r6, #0
 8005920:	196b      	adds	r3, r5, r5
 8005922:	eb46 0406 	adc.w	r4, r6, r6
 8005926:	461a      	mov	r2, r3
 8005928:	4623      	mov	r3, r4
 800592a:	f7fa fca9 	bl	8000280 <__aeabi_uldivmod>
 800592e:	4603      	mov	r3, r0
 8005930:	460c      	mov	r4, r1
 8005932:	461a      	mov	r2, r3
 8005934:	4b6a      	ldr	r3, [pc, #424]	; (8005ae0 <UART_SetConfig+0x384>)
 8005936:	fba3 1302 	umull	r1, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2164      	movs	r1, #100	; 0x64
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	3332      	adds	r3, #50	; 0x32
 8005948:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <UART_SetConfig+0x384>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f003 0207 	and.w	r2, r3, #7
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4442      	add	r2, r8
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	e26f      	b.n	8005e3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7fe fd51 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8005962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	461d      	mov	r5, r3
 8005968:	f04f 0600 	mov.w	r6, #0
 800596c:	46a8      	mov	r8, r5
 800596e:	46b1      	mov	r9, r6
 8005970:	eb18 0308 	adds.w	r3, r8, r8
 8005974:	eb49 0409 	adc.w	r4, r9, r9
 8005978:	4698      	mov	r8, r3
 800597a:	46a1      	mov	r9, r4
 800597c:	eb18 0805 	adds.w	r8, r8, r5
 8005980:	eb49 0906 	adc.w	r9, r9, r6
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005998:	4688      	mov	r8, r1
 800599a:	4691      	mov	r9, r2
 800599c:	eb18 0005 	adds.w	r0, r8, r5
 80059a0:	eb49 0106 	adc.w	r1, r9, r6
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	461d      	mov	r5, r3
 80059aa:	f04f 0600 	mov.w	r6, #0
 80059ae:	196b      	adds	r3, r5, r5
 80059b0:	eb46 0406 	adc.w	r4, r6, r6
 80059b4:	461a      	mov	r2, r3
 80059b6:	4623      	mov	r3, r4
 80059b8:	f7fa fc62 	bl	8000280 <__aeabi_uldivmod>
 80059bc:	4603      	mov	r3, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <UART_SetConfig+0x384>)
 80059c4:	fba3 2302 	umull	r2, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	461d      	mov	r5, r3
 80059d2:	f04f 0600 	mov.w	r6, #0
 80059d6:	46a9      	mov	r9, r5
 80059d8:	46b2      	mov	sl, r6
 80059da:	eb19 0309 	adds.w	r3, r9, r9
 80059de:	eb4a 040a 	adc.w	r4, sl, sl
 80059e2:	4699      	mov	r9, r3
 80059e4:	46a2      	mov	sl, r4
 80059e6:	eb19 0905 	adds.w	r9, r9, r5
 80059ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80059ee:	f04f 0100 	mov.w	r1, #0
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a02:	4689      	mov	r9, r1
 8005a04:	4692      	mov	sl, r2
 8005a06:	eb19 0005 	adds.w	r0, r9, r5
 8005a0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	461d      	mov	r5, r3
 8005a14:	f04f 0600 	mov.w	r6, #0
 8005a18:	196b      	adds	r3, r5, r5
 8005a1a:	eb46 0406 	adc.w	r4, r6, r6
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4623      	mov	r3, r4
 8005a22:	f7fa fc2d 	bl	8000280 <__aeabi_uldivmod>
 8005a26:	4603      	mov	r3, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ae0 <UART_SetConfig+0x384>)
 8005a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2164      	movs	r1, #100	; 0x64
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	3332      	adds	r3, #50	; 0x32
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <UART_SetConfig+0x384>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a4e:	4498      	add	r8, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	461d      	mov	r5, r3
 8005a54:	f04f 0600 	mov.w	r6, #0
 8005a58:	46a9      	mov	r9, r5
 8005a5a:	46b2      	mov	sl, r6
 8005a5c:	eb19 0309 	adds.w	r3, r9, r9
 8005a60:	eb4a 040a 	adc.w	r4, sl, sl
 8005a64:	4699      	mov	r9, r3
 8005a66:	46a2      	mov	sl, r4
 8005a68:	eb19 0905 	adds.w	r9, r9, r5
 8005a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a84:	4689      	mov	r9, r1
 8005a86:	4692      	mov	sl, r2
 8005a88:	eb19 0005 	adds.w	r0, r9, r5
 8005a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	461d      	mov	r5, r3
 8005a96:	f04f 0600 	mov.w	r6, #0
 8005a9a:	196b      	adds	r3, r5, r5
 8005a9c:	eb46 0406 	adc.w	r4, r6, r6
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f7fa fbec 	bl	8000280 <__aeabi_uldivmod>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <UART_SetConfig+0x384>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <UART_SetConfig+0x384>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4442      	add	r2, r8
 8005ad4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ad6:	e1b2      	b.n	8005e3e <UART_SetConfig+0x6e2>
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40011400 	.word	0x40011400
 8005ae0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4ad7      	ldr	r2, [pc, #860]	; (8005e48 <UART_SetConfig+0x6ec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d005      	beq.n	8005afa <UART_SetConfig+0x39e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4ad6      	ldr	r2, [pc, #856]	; (8005e4c <UART_SetConfig+0x6f0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f040 80d1 	bne.w	8005c9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005afa:	f7fe fc97 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 8005afe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	469a      	mov	sl, r3
 8005b04:	f04f 0b00 	mov.w	fp, #0
 8005b08:	46d0      	mov	r8, sl
 8005b0a:	46d9      	mov	r9, fp
 8005b0c:	eb18 0308 	adds.w	r3, r8, r8
 8005b10:	eb49 0409 	adc.w	r4, r9, r9
 8005b14:	4698      	mov	r8, r3
 8005b16:	46a1      	mov	r9, r4
 8005b18:	eb18 080a 	adds.w	r8, r8, sl
 8005b1c:	eb49 090b 	adc.w	r9, r9, fp
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b34:	4688      	mov	r8, r1
 8005b36:	4691      	mov	r9, r2
 8005b38:	eb1a 0508 	adds.w	r5, sl, r8
 8005b3c:	eb4b 0609 	adc.w	r6, fp, r9
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	f04f 0400 	mov.w	r4, #0
 8005b52:	0094      	lsls	r4, r2, #2
 8005b54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	4628      	mov	r0, r5
 8005b60:	4631      	mov	r1, r6
 8005b62:	f7fa fb8d 	bl	8000280 <__aeabi_uldivmod>
 8005b66:	4603      	mov	r3, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4bb8      	ldr	r3, [pc, #736]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	469b      	mov	fp, r3
 8005b7c:	f04f 0c00 	mov.w	ip, #0
 8005b80:	46d9      	mov	r9, fp
 8005b82:	46e2      	mov	sl, ip
 8005b84:	eb19 0309 	adds.w	r3, r9, r9
 8005b88:	eb4a 040a 	adc.w	r4, sl, sl
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	46a2      	mov	sl, r4
 8005b90:	eb19 090b 	adds.w	r9, r9, fp
 8005b94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bac:	4689      	mov	r9, r1
 8005bae:	4692      	mov	sl, r2
 8005bb0:	eb1b 0509 	adds.w	r5, fp, r9
 8005bb4:	eb4c 060a 	adc.w	r6, ip, sl
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	0094      	lsls	r4, r2, #2
 8005bcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd0:	008b      	lsls	r3, r1, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	4631      	mov	r1, r6
 8005bda:	f7fa fb51 	bl	8000280 <__aeabi_uldivmod>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b9a      	ldr	r3, [pc, #616]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005be6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2164      	movs	r1, #100	; 0x64
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	; 0x32
 8005bf8:	4a95      	ldr	r2, [pc, #596]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c04:	4498      	add	r8, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	469b      	mov	fp, r3
 8005c0a:	f04f 0c00 	mov.w	ip, #0
 8005c0e:	46d9      	mov	r9, fp
 8005c10:	46e2      	mov	sl, ip
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 090b 	adds.w	r9, r9, fp
 8005c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005c42:	eb4c 060a 	adc.w	r6, ip, sl
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f04f 0400 	mov.w	r4, #0
 8005c58:	0094      	lsls	r4, r2, #2
 8005c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c5e:	008b      	lsls	r3, r1, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	4631      	mov	r1, r6
 8005c68:	f7fa fb0a 	bl	8000280 <__aeabi_uldivmod>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	461a      	mov	r2, r3
 8005c72:	4b77      	ldr	r3, [pc, #476]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	; 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	3332      	adds	r3, #50	; 0x32
 8005c86:	4a72      	ldr	r2, [pc, #456]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4442      	add	r2, r8
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	e0d0      	b.n	8005e3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f7fe fbb2 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8005ca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	46d0      	mov	r8, sl
 8005cac:	46d9      	mov	r9, fp
 8005cae:	eb18 0308 	adds.w	r3, r8, r8
 8005cb2:	eb49 0409 	adc.w	r4, r9, r9
 8005cb6:	4698      	mov	r8, r3
 8005cb8:	46a1      	mov	r9, r4
 8005cba:	eb18 080a 	adds.w	r8, r8, sl
 8005cbe:	eb49 090b 	adc.w	r9, r9, fp
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cd6:	4688      	mov	r8, r1
 8005cd8:	4691      	mov	r9, r2
 8005cda:	eb1a 0508 	adds.w	r5, sl, r8
 8005cde:	eb4b 0609 	adc.w	r6, fp, r9
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	f04f 0400 	mov.w	r4, #0
 8005cf4:	0094      	lsls	r4, r2, #2
 8005cf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cfa:	008b      	lsls	r3, r1, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	4631      	mov	r1, r6
 8005d04:	f7fa fabc 	bl	8000280 <__aeabi_uldivmod>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d10:	fba3 2302 	umull	r2, r3, r3, r2
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	469b      	mov	fp, r3
 8005d1e:	f04f 0c00 	mov.w	ip, #0
 8005d22:	46d9      	mov	r9, fp
 8005d24:	46e2      	mov	sl, ip
 8005d26:	eb19 0309 	adds.w	r3, r9, r9
 8005d2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d2e:	4699      	mov	r9, r3
 8005d30:	46a2      	mov	sl, r4
 8005d32:	eb19 090b 	adds.w	r9, r9, fp
 8005d36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d4e:	4689      	mov	r9, r1
 8005d50:	4692      	mov	sl, r2
 8005d52:	eb1b 0509 	adds.w	r5, fp, r9
 8005d56:	eb4c 060a 	adc.w	r6, ip, sl
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	f04f 0400 	mov.w	r4, #0
 8005d6c:	0094      	lsls	r4, r2, #2
 8005d6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d72:	008b      	lsls	r3, r1, #2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	f7fa fa80 	bl	8000280 <__aeabi_uldivmod>
 8005d80:	4603      	mov	r3, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	461a      	mov	r2, r3
 8005d86:	4b32      	ldr	r3, [pc, #200]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d88:	fba3 1302 	umull	r1, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	2164      	movs	r1, #100	; 0x64
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	3332      	adds	r3, #50	; 0x32
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da6:	4498      	add	r8, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	469b      	mov	fp, r3
 8005dac:	f04f 0c00 	mov.w	ip, #0
 8005db0:	46d9      	mov	r9, fp
 8005db2:	46e2      	mov	sl, ip
 8005db4:	eb19 0309 	adds.w	r3, r9, r9
 8005db8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	46a2      	mov	sl, r4
 8005dc0:	eb19 090b 	adds.w	r9, r9, fp
 8005dc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dc8:	f04f 0100 	mov.w	r1, #0
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ddc:	4689      	mov	r9, r1
 8005dde:	4692      	mov	sl, r2
 8005de0:	eb1b 0509 	adds.w	r5, fp, r9
 8005de4:	eb4c 060a 	adc.w	r6, ip, sl
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4619      	mov	r1, r3
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	f04f 0400 	mov.w	r4, #0
 8005dfa:	0094      	lsls	r4, r2, #2
 8005dfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e00:	008b      	lsls	r3, r1, #2
 8005e02:	461a      	mov	r2, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	4631      	mov	r1, r6
 8005e0a:	f7fa fa39 	bl	8000280 <__aeabi_uldivmod>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005e16:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2164      	movs	r1, #100	; 0x64
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	3332      	adds	r3, #50	; 0x32
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <UART_SetConfig+0x6f4>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	f003 020f 	and.w	r2, r3, #15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4442      	add	r2, r8
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	e7ff      	b.n	8005e3e <UART_SetConfig+0x6e2>
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	40011000 	.word	0x40011000
 8005e4c:	40011400 	.word	0x40011400
 8005e50:	51eb851f 	.word	0x51eb851f

08005e54 <__errno>:
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <__errno+0x8>)
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	2000000c 	.word	0x2000000c

08005e60 <__libc_init_array>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0d      	ldr	r6, [pc, #52]	; (8005e98 <__libc_init_array+0x38>)
 8005e64:	4c0d      	ldr	r4, [pc, #52]	; (8005e9c <__libc_init_array+0x3c>)
 8005e66:	1ba4      	subs	r4, r4, r6
 8005e68:	10a4      	asrs	r4, r4, #2
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	42a5      	cmp	r5, r4
 8005e6e:	d109      	bne.n	8005e84 <__libc_init_array+0x24>
 8005e70:	4e0b      	ldr	r6, [pc, #44]	; (8005ea0 <__libc_init_array+0x40>)
 8005e72:	4c0c      	ldr	r4, [pc, #48]	; (8005ea4 <__libc_init_array+0x44>)
 8005e74:	f000 fca0 	bl	80067b8 <_init>
 8005e78:	1ba4      	subs	r4, r4, r6
 8005e7a:	10a4      	asrs	r4, r4, #2
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	42a5      	cmp	r5, r4
 8005e80:	d105      	bne.n	8005e8e <__libc_init_array+0x2e>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e88:	4798      	blx	r3
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	e7ee      	b.n	8005e6c <__libc_init_array+0xc>
 8005e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e92:	4798      	blx	r3
 8005e94:	3501      	adds	r5, #1
 8005e96:	e7f2      	b.n	8005e7e <__libc_init_array+0x1e>
 8005e98:	08006ebc 	.word	0x08006ebc
 8005e9c:	08006ebc 	.word	0x08006ebc
 8005ea0:	08006ebc 	.word	0x08006ebc
 8005ea4:	08006ec0 	.word	0x08006ec0

08005ea8 <memset>:
 8005ea8:	4402      	add	r2, r0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d100      	bne.n	8005eb2 <memset+0xa>
 8005eb0:	4770      	bx	lr
 8005eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb6:	e7f9      	b.n	8005eac <memset+0x4>

08005eb8 <srand>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <srand+0x38>)
 8005ebc:	681c      	ldr	r4, [r3, #0]
 8005ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	b97b      	cbnz	r3, 8005ee4 <srand+0x2c>
 8005ec4:	2018      	movs	r0, #24
 8005ec6:	f000 f889 	bl	8005fdc <malloc>
 8005eca:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <srand+0x3c>)
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <srand+0x40>)
 8005ece:	63a0      	str	r0, [r4, #56]	; 0x38
 8005ed0:	e9c0 2300 	strd	r2, r3, [r0]
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <srand+0x44>)
 8005ed6:	6083      	str	r3, [r0, #8]
 8005ed8:	230b      	movs	r3, #11
 8005eda:	8183      	strh	r3, [r0, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	611d      	str	r5, [r3, #16]
 8005eea:	615a      	str	r2, [r3, #20]
 8005eec:	bd38      	pop	{r3, r4, r5, pc}
 8005eee:	bf00      	nop
 8005ef0:	2000000c 	.word	0x2000000c
 8005ef4:	abcd330e 	.word	0xabcd330e
 8005ef8:	e66d1234 	.word	0xe66d1234
 8005efc:	0005deec 	.word	0x0005deec

08005f00 <rand>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <rand+0x50>)
 8005f04:	681c      	ldr	r4, [r3, #0]
 8005f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f08:	b97b      	cbnz	r3, 8005f2a <rand+0x2a>
 8005f0a:	2018      	movs	r0, #24
 8005f0c:	f000 f866 	bl	8005fdc <malloc>
 8005f10:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <rand+0x54>)
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <rand+0x58>)
 8005f14:	63a0      	str	r0, [r4, #56]	; 0x38
 8005f16:	e9c0 2300 	strd	r2, r3, [r0]
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <rand+0x5c>)
 8005f1c:	6083      	str	r3, [r0, #8]
 8005f1e:	230b      	movs	r3, #11
 8005f20:	8183      	strh	r3, [r0, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	2300      	movs	r3, #0
 8005f26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005f2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f2c:	480c      	ldr	r0, [pc, #48]	; (8005f60 <rand+0x60>)
 8005f2e:	690a      	ldr	r2, [r1, #16]
 8005f30:	694b      	ldr	r3, [r1, #20]
 8005f32:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <rand+0x64>)
 8005f34:	4350      	muls	r0, r2
 8005f36:	fb04 0003 	mla	r0, r4, r3, r0
 8005f3a:	fba2 2304 	umull	r2, r3, r2, r4
 8005f3e:	4403      	add	r3, r0
 8005f40:	1c54      	adds	r4, r2, #1
 8005f42:	f143 0500 	adc.w	r5, r3, #0
 8005f46:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8005f4a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	2000000c 	.word	0x2000000c
 8005f54:	abcd330e 	.word	0xabcd330e
 8005f58:	e66d1234 	.word	0xe66d1234
 8005f5c:	0005deec 	.word	0x0005deec
 8005f60:	5851f42d 	.word	0x5851f42d
 8005f64:	4c957f2d 	.word	0x4c957f2d

08005f68 <_vsniprintf_r>:
 8005f68:	b530      	push	{r4, r5, lr}
 8005f6a:	1e14      	subs	r4, r2, #0
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b09b      	sub	sp, #108	; 0x6c
 8005f70:	4618      	mov	r0, r3
 8005f72:	da05      	bge.n	8005f80 <_vsniprintf_r+0x18>
 8005f74:	238b      	movs	r3, #139	; 0x8b
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	b01b      	add	sp, #108	; 0x6c
 8005f7e:	bd30      	pop	{r4, r5, pc}
 8005f80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005f88:	bf14      	ite	ne
 8005f8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f8e:	4623      	moveq	r3, r4
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f98:	9100      	str	r1, [sp, #0]
 8005f9a:	9104      	str	r1, [sp, #16]
 8005f9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fa4:	4669      	mov	r1, sp
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 f922 	bl	80061f0 <_svfiprintf_r>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	bfbc      	itt	lt
 8005fb0:	238b      	movlt	r3, #139	; 0x8b
 8005fb2:	602b      	strlt	r3, [r5, #0]
 8005fb4:	2c00      	cmp	r4, #0
 8005fb6:	d0e1      	beq.n	8005f7c <_vsniprintf_r+0x14>
 8005fb8:	9b00      	ldr	r3, [sp, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e7dd      	b.n	8005f7c <_vsniprintf_r+0x14>

08005fc0 <vsniprintf>:
 8005fc0:	b507      	push	{r0, r1, r2, lr}
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4803      	ldr	r0, [pc, #12]	; (8005fd8 <vsniprintf+0x18>)
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f7ff ffcb 	bl	8005f68 <_vsniprintf_r>
 8005fd2:	b003      	add	sp, #12
 8005fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <malloc>:
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <malloc+0xc>)
 8005fde:	4601      	mov	r1, r0
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f000 b851 	b.w	8006088 <_malloc_r>
 8005fe6:	bf00      	nop
 8005fe8:	2000000c 	.word	0x2000000c

08005fec <_free_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4605      	mov	r5, r0
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d045      	beq.n	8006080 <_free_r+0x94>
 8005ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff8:	1f0c      	subs	r4, r1, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfb8      	it	lt
 8005ffe:	18e4      	addlt	r4, r4, r3
 8006000:	f000 fbaa 	bl	8006758 <__malloc_lock>
 8006004:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <_free_r+0x98>)
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	4610      	mov	r0, r2
 800600a:	b933      	cbnz	r3, 800601a <_free_r+0x2e>
 800600c:	6063      	str	r3, [r4, #4]
 800600e:	6014      	str	r4, [r2, #0]
 8006010:	4628      	mov	r0, r5
 8006012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006016:	f000 bba0 	b.w	800675a <__malloc_unlock>
 800601a:	42a3      	cmp	r3, r4
 800601c:	d90c      	bls.n	8006038 <_free_r+0x4c>
 800601e:	6821      	ldr	r1, [r4, #0]
 8006020:	1862      	adds	r2, r4, r1
 8006022:	4293      	cmp	r3, r2
 8006024:	bf04      	itt	eq
 8006026:	681a      	ldreq	r2, [r3, #0]
 8006028:	685b      	ldreq	r3, [r3, #4]
 800602a:	6063      	str	r3, [r4, #4]
 800602c:	bf04      	itt	eq
 800602e:	1852      	addeq	r2, r2, r1
 8006030:	6022      	streq	r2, [r4, #0]
 8006032:	6004      	str	r4, [r0, #0]
 8006034:	e7ec      	b.n	8006010 <_free_r+0x24>
 8006036:	4613      	mov	r3, r2
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	b10a      	cbz	r2, 8006040 <_free_r+0x54>
 800603c:	42a2      	cmp	r2, r4
 800603e:	d9fa      	bls.n	8006036 <_free_r+0x4a>
 8006040:	6819      	ldr	r1, [r3, #0]
 8006042:	1858      	adds	r0, r3, r1
 8006044:	42a0      	cmp	r0, r4
 8006046:	d10b      	bne.n	8006060 <_free_r+0x74>
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	4401      	add	r1, r0
 800604c:	1858      	adds	r0, r3, r1
 800604e:	4282      	cmp	r2, r0
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	d1dd      	bne.n	8006010 <_free_r+0x24>
 8006054:	6810      	ldr	r0, [r2, #0]
 8006056:	6852      	ldr	r2, [r2, #4]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	4401      	add	r1, r0
 800605c:	6019      	str	r1, [r3, #0]
 800605e:	e7d7      	b.n	8006010 <_free_r+0x24>
 8006060:	d902      	bls.n	8006068 <_free_r+0x7c>
 8006062:	230c      	movs	r3, #12
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	e7d3      	b.n	8006010 <_free_r+0x24>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	1821      	adds	r1, r4, r0
 800606c:	428a      	cmp	r2, r1
 800606e:	bf04      	itt	eq
 8006070:	6811      	ldreq	r1, [r2, #0]
 8006072:	6852      	ldreq	r2, [r2, #4]
 8006074:	6062      	str	r2, [r4, #4]
 8006076:	bf04      	itt	eq
 8006078:	1809      	addeq	r1, r1, r0
 800607a:	6021      	streq	r1, [r4, #0]
 800607c:	605c      	str	r4, [r3, #4]
 800607e:	e7c7      	b.n	8006010 <_free_r+0x24>
 8006080:	bd38      	pop	{r3, r4, r5, pc}
 8006082:	bf00      	nop
 8006084:	20000094 	.word	0x20000094

08006088 <_malloc_r>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	1ccd      	adds	r5, r1, #3
 800608c:	f025 0503 	bic.w	r5, r5, #3
 8006090:	3508      	adds	r5, #8
 8006092:	2d0c      	cmp	r5, #12
 8006094:	bf38      	it	cc
 8006096:	250c      	movcc	r5, #12
 8006098:	2d00      	cmp	r5, #0
 800609a:	4606      	mov	r6, r0
 800609c:	db01      	blt.n	80060a2 <_malloc_r+0x1a>
 800609e:	42a9      	cmp	r1, r5
 80060a0:	d903      	bls.n	80060aa <_malloc_r+0x22>
 80060a2:	230c      	movs	r3, #12
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	2000      	movs	r0, #0
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	f000 fb55 	bl	8006758 <__malloc_lock>
 80060ae:	4a21      	ldr	r2, [pc, #132]	; (8006134 <_malloc_r+0xac>)
 80060b0:	6814      	ldr	r4, [r2, #0]
 80060b2:	4621      	mov	r1, r4
 80060b4:	b991      	cbnz	r1, 80060dc <_malloc_r+0x54>
 80060b6:	4c20      	ldr	r4, [pc, #128]	; (8006138 <_malloc_r+0xb0>)
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	b91b      	cbnz	r3, 80060c4 <_malloc_r+0x3c>
 80060bc:	4630      	mov	r0, r6
 80060be:	f000 fb17 	bl	80066f0 <_sbrk_r>
 80060c2:	6020      	str	r0, [r4, #0]
 80060c4:	4629      	mov	r1, r5
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 fb12 	bl	80066f0 <_sbrk_r>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d124      	bne.n	800611a <_malloc_r+0x92>
 80060d0:	230c      	movs	r3, #12
 80060d2:	6033      	str	r3, [r6, #0]
 80060d4:	4630      	mov	r0, r6
 80060d6:	f000 fb40 	bl	800675a <__malloc_unlock>
 80060da:	e7e4      	b.n	80060a6 <_malloc_r+0x1e>
 80060dc:	680b      	ldr	r3, [r1, #0]
 80060de:	1b5b      	subs	r3, r3, r5
 80060e0:	d418      	bmi.n	8006114 <_malloc_r+0x8c>
 80060e2:	2b0b      	cmp	r3, #11
 80060e4:	d90f      	bls.n	8006106 <_malloc_r+0x7e>
 80060e6:	600b      	str	r3, [r1, #0]
 80060e8:	50cd      	str	r5, [r1, r3]
 80060ea:	18cc      	adds	r4, r1, r3
 80060ec:	4630      	mov	r0, r6
 80060ee:	f000 fb34 	bl	800675a <__malloc_unlock>
 80060f2:	f104 000b 	add.w	r0, r4, #11
 80060f6:	1d23      	adds	r3, r4, #4
 80060f8:	f020 0007 	bic.w	r0, r0, #7
 80060fc:	1ac3      	subs	r3, r0, r3
 80060fe:	d0d3      	beq.n	80060a8 <_malloc_r+0x20>
 8006100:	425a      	negs	r2, r3
 8006102:	50e2      	str	r2, [r4, r3]
 8006104:	e7d0      	b.n	80060a8 <_malloc_r+0x20>
 8006106:	428c      	cmp	r4, r1
 8006108:	684b      	ldr	r3, [r1, #4]
 800610a:	bf16      	itet	ne
 800610c:	6063      	strne	r3, [r4, #4]
 800610e:	6013      	streq	r3, [r2, #0]
 8006110:	460c      	movne	r4, r1
 8006112:	e7eb      	b.n	80060ec <_malloc_r+0x64>
 8006114:	460c      	mov	r4, r1
 8006116:	6849      	ldr	r1, [r1, #4]
 8006118:	e7cc      	b.n	80060b4 <_malloc_r+0x2c>
 800611a:	1cc4      	adds	r4, r0, #3
 800611c:	f024 0403 	bic.w	r4, r4, #3
 8006120:	42a0      	cmp	r0, r4
 8006122:	d005      	beq.n	8006130 <_malloc_r+0xa8>
 8006124:	1a21      	subs	r1, r4, r0
 8006126:	4630      	mov	r0, r6
 8006128:	f000 fae2 	bl	80066f0 <_sbrk_r>
 800612c:	3001      	adds	r0, #1
 800612e:	d0cf      	beq.n	80060d0 <_malloc_r+0x48>
 8006130:	6025      	str	r5, [r4, #0]
 8006132:	e7db      	b.n	80060ec <_malloc_r+0x64>
 8006134:	20000094 	.word	0x20000094
 8006138:	20000098 	.word	0x20000098

0800613c <__ssputs_r>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	688e      	ldr	r6, [r1, #8]
 8006142:	429e      	cmp	r6, r3
 8006144:	4682      	mov	sl, r0
 8006146:	460c      	mov	r4, r1
 8006148:	4690      	mov	r8, r2
 800614a:	4699      	mov	r9, r3
 800614c:	d837      	bhi.n	80061be <__ssputs_r+0x82>
 800614e:	898a      	ldrh	r2, [r1, #12]
 8006150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006154:	d031      	beq.n	80061ba <__ssputs_r+0x7e>
 8006156:	6825      	ldr	r5, [r4, #0]
 8006158:	6909      	ldr	r1, [r1, #16]
 800615a:	1a6f      	subs	r7, r5, r1
 800615c:	6965      	ldr	r5, [r4, #20]
 800615e:	2302      	movs	r3, #2
 8006160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006164:	fb95 f5f3 	sdiv	r5, r5, r3
 8006168:	f109 0301 	add.w	r3, r9, #1
 800616c:	443b      	add	r3, r7
 800616e:	429d      	cmp	r5, r3
 8006170:	bf38      	it	cc
 8006172:	461d      	movcc	r5, r3
 8006174:	0553      	lsls	r3, r2, #21
 8006176:	d530      	bpl.n	80061da <__ssputs_r+0x9e>
 8006178:	4629      	mov	r1, r5
 800617a:	f7ff ff85 	bl	8006088 <_malloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	b950      	cbnz	r0, 8006198 <__ssputs_r+0x5c>
 8006182:	230c      	movs	r3, #12
 8006184:	f8ca 3000 	str.w	r3, [sl]
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006198:	463a      	mov	r2, r7
 800619a:	6921      	ldr	r1, [r4, #16]
 800619c:	f000 fab8 	bl	8006710 <memcpy>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	6126      	str	r6, [r4, #16]
 80061ae:	6165      	str	r5, [r4, #20]
 80061b0:	443e      	add	r6, r7
 80061b2:	1bed      	subs	r5, r5, r7
 80061b4:	6026      	str	r6, [r4, #0]
 80061b6:	60a5      	str	r5, [r4, #8]
 80061b8:	464e      	mov	r6, r9
 80061ba:	454e      	cmp	r6, r9
 80061bc:	d900      	bls.n	80061c0 <__ssputs_r+0x84>
 80061be:	464e      	mov	r6, r9
 80061c0:	4632      	mov	r2, r6
 80061c2:	4641      	mov	r1, r8
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	f000 faae 	bl	8006726 <memmove>
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	1b9b      	subs	r3, r3, r6
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	441e      	add	r6, r3
 80061d4:	6026      	str	r6, [r4, #0]
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7dc      	b.n	8006194 <__ssputs_r+0x58>
 80061da:	462a      	mov	r2, r5
 80061dc:	f000 fabe 	bl	800675c <_realloc_r>
 80061e0:	4606      	mov	r6, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1e2      	bne.n	80061ac <__ssputs_r+0x70>
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	4650      	mov	r0, sl
 80061ea:	f7ff feff 	bl	8005fec <_free_r>
 80061ee:	e7c8      	b.n	8006182 <__ssputs_r+0x46>

080061f0 <_svfiprintf_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	461d      	mov	r5, r3
 80061f6:	898b      	ldrh	r3, [r1, #12]
 80061f8:	061f      	lsls	r7, r3, #24
 80061fa:	b09d      	sub	sp, #116	; 0x74
 80061fc:	4680      	mov	r8, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4616      	mov	r6, r2
 8006202:	d50f      	bpl.n	8006224 <_svfiprintf_r+0x34>
 8006204:	690b      	ldr	r3, [r1, #16]
 8006206:	b96b      	cbnz	r3, 8006224 <_svfiprintf_r+0x34>
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	f7ff ff3d 	bl	8006088 <_malloc_r>
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	6120      	str	r0, [r4, #16]
 8006212:	b928      	cbnz	r0, 8006220 <_svfiprintf_r+0x30>
 8006214:	230c      	movs	r3, #12
 8006216:	f8c8 3000 	str.w	r3, [r8]
 800621a:	f04f 30ff 	mov.w	r0, #4294967295
 800621e:	e0c8      	b.n	80063b2 <_svfiprintf_r+0x1c2>
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	6163      	str	r3, [r4, #20]
 8006224:	2300      	movs	r3, #0
 8006226:	9309      	str	r3, [sp, #36]	; 0x24
 8006228:	2320      	movs	r3, #32
 800622a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800622e:	2330      	movs	r3, #48	; 0x30
 8006230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006234:	9503      	str	r5, [sp, #12]
 8006236:	f04f 0b01 	mov.w	fp, #1
 800623a:	4637      	mov	r7, r6
 800623c:	463d      	mov	r5, r7
 800623e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006242:	b10b      	cbz	r3, 8006248 <_svfiprintf_r+0x58>
 8006244:	2b25      	cmp	r3, #37	; 0x25
 8006246:	d13e      	bne.n	80062c6 <_svfiprintf_r+0xd6>
 8006248:	ebb7 0a06 	subs.w	sl, r7, r6
 800624c:	d00b      	beq.n	8006266 <_svfiprintf_r+0x76>
 800624e:	4653      	mov	r3, sl
 8006250:	4632      	mov	r2, r6
 8006252:	4621      	mov	r1, r4
 8006254:	4640      	mov	r0, r8
 8006256:	f7ff ff71 	bl	800613c <__ssputs_r>
 800625a:	3001      	adds	r0, #1
 800625c:	f000 80a4 	beq.w	80063a8 <_svfiprintf_r+0x1b8>
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	4453      	add	r3, sl
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	783b      	ldrb	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 809d 	beq.w	80063a8 <_svfiprintf_r+0x1b8>
 800626e:	2300      	movs	r3, #0
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006280:	931a      	str	r3, [sp, #104]	; 0x68
 8006282:	462f      	mov	r7, r5
 8006284:	2205      	movs	r2, #5
 8006286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800628a:	4850      	ldr	r0, [pc, #320]	; (80063cc <_svfiprintf_r+0x1dc>)
 800628c:	f7f9 ffa8 	bl	80001e0 <memchr>
 8006290:	9b04      	ldr	r3, [sp, #16]
 8006292:	b9d0      	cbnz	r0, 80062ca <_svfiprintf_r+0xda>
 8006294:	06d9      	lsls	r1, r3, #27
 8006296:	bf44      	itt	mi
 8006298:	2220      	movmi	r2, #32
 800629a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800629e:	071a      	lsls	r2, r3, #28
 80062a0:	bf44      	itt	mi
 80062a2:	222b      	movmi	r2, #43	; 0x2b
 80062a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062a8:	782a      	ldrb	r2, [r5, #0]
 80062aa:	2a2a      	cmp	r2, #42	; 0x2a
 80062ac:	d015      	beq.n	80062da <_svfiprintf_r+0xea>
 80062ae:	9a07      	ldr	r2, [sp, #28]
 80062b0:	462f      	mov	r7, r5
 80062b2:	2000      	movs	r0, #0
 80062b4:	250a      	movs	r5, #10
 80062b6:	4639      	mov	r1, r7
 80062b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062bc:	3b30      	subs	r3, #48	; 0x30
 80062be:	2b09      	cmp	r3, #9
 80062c0:	d94d      	bls.n	800635e <_svfiprintf_r+0x16e>
 80062c2:	b1b8      	cbz	r0, 80062f4 <_svfiprintf_r+0x104>
 80062c4:	e00f      	b.n	80062e6 <_svfiprintf_r+0xf6>
 80062c6:	462f      	mov	r7, r5
 80062c8:	e7b8      	b.n	800623c <_svfiprintf_r+0x4c>
 80062ca:	4a40      	ldr	r2, [pc, #256]	; (80063cc <_svfiprintf_r+0x1dc>)
 80062cc:	1a80      	subs	r0, r0, r2
 80062ce:	fa0b f000 	lsl.w	r0, fp, r0
 80062d2:	4318      	orrs	r0, r3
 80062d4:	9004      	str	r0, [sp, #16]
 80062d6:	463d      	mov	r5, r7
 80062d8:	e7d3      	b.n	8006282 <_svfiprintf_r+0x92>
 80062da:	9a03      	ldr	r2, [sp, #12]
 80062dc:	1d11      	adds	r1, r2, #4
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	9103      	str	r1, [sp, #12]
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	db01      	blt.n	80062ea <_svfiprintf_r+0xfa>
 80062e6:	9207      	str	r2, [sp, #28]
 80062e8:	e004      	b.n	80062f4 <_svfiprintf_r+0x104>
 80062ea:	4252      	negs	r2, r2
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	9207      	str	r2, [sp, #28]
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	783b      	ldrb	r3, [r7, #0]
 80062f6:	2b2e      	cmp	r3, #46	; 0x2e
 80062f8:	d10c      	bne.n	8006314 <_svfiprintf_r+0x124>
 80062fa:	787b      	ldrb	r3, [r7, #1]
 80062fc:	2b2a      	cmp	r3, #42	; 0x2a
 80062fe:	d133      	bne.n	8006368 <_svfiprintf_r+0x178>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	1d1a      	adds	r2, r3, #4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	9203      	str	r2, [sp, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfb8      	it	lt
 800630c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006310:	3702      	adds	r7, #2
 8006312:	9305      	str	r3, [sp, #20]
 8006314:	4d2e      	ldr	r5, [pc, #184]	; (80063d0 <_svfiprintf_r+0x1e0>)
 8006316:	7839      	ldrb	r1, [r7, #0]
 8006318:	2203      	movs	r2, #3
 800631a:	4628      	mov	r0, r5
 800631c:	f7f9 ff60 	bl	80001e0 <memchr>
 8006320:	b138      	cbz	r0, 8006332 <_svfiprintf_r+0x142>
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	1b40      	subs	r0, r0, r5
 8006326:	fa03 f000 	lsl.w	r0, r3, r0
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	4303      	orrs	r3, r0
 800632e:	3701      	adds	r7, #1
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	7839      	ldrb	r1, [r7, #0]
 8006334:	4827      	ldr	r0, [pc, #156]	; (80063d4 <_svfiprintf_r+0x1e4>)
 8006336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800633a:	2206      	movs	r2, #6
 800633c:	1c7e      	adds	r6, r7, #1
 800633e:	f7f9 ff4f 	bl	80001e0 <memchr>
 8006342:	2800      	cmp	r0, #0
 8006344:	d038      	beq.n	80063b8 <_svfiprintf_r+0x1c8>
 8006346:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <_svfiprintf_r+0x1e8>)
 8006348:	bb13      	cbnz	r3, 8006390 <_svfiprintf_r+0x1a0>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	3308      	adds	r3, #8
 8006354:	9303      	str	r3, [sp, #12]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	444b      	add	r3, r9
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	e76d      	b.n	800623a <_svfiprintf_r+0x4a>
 800635e:	fb05 3202 	mla	r2, r5, r2, r3
 8006362:	2001      	movs	r0, #1
 8006364:	460f      	mov	r7, r1
 8006366:	e7a6      	b.n	80062b6 <_svfiprintf_r+0xc6>
 8006368:	2300      	movs	r3, #0
 800636a:	3701      	adds	r7, #1
 800636c:	9305      	str	r3, [sp, #20]
 800636e:	4619      	mov	r1, r3
 8006370:	250a      	movs	r5, #10
 8006372:	4638      	mov	r0, r7
 8006374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006378:	3a30      	subs	r2, #48	; 0x30
 800637a:	2a09      	cmp	r2, #9
 800637c:	d903      	bls.n	8006386 <_svfiprintf_r+0x196>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0c8      	beq.n	8006314 <_svfiprintf_r+0x124>
 8006382:	9105      	str	r1, [sp, #20]
 8006384:	e7c6      	b.n	8006314 <_svfiprintf_r+0x124>
 8006386:	fb05 2101 	mla	r1, r5, r1, r2
 800638a:	2301      	movs	r3, #1
 800638c:	4607      	mov	r7, r0
 800638e:	e7f0      	b.n	8006372 <_svfiprintf_r+0x182>
 8006390:	ab03      	add	r3, sp, #12
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4622      	mov	r2, r4
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <_svfiprintf_r+0x1ec>)
 8006398:	a904      	add	r1, sp, #16
 800639a:	4640      	mov	r0, r8
 800639c:	f3af 8000 	nop.w
 80063a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063a4:	4681      	mov	r9, r0
 80063a6:	d1d6      	bne.n	8006356 <_svfiprintf_r+0x166>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	065b      	lsls	r3, r3, #25
 80063ac:	f53f af35 	bmi.w	800621a <_svfiprintf_r+0x2a>
 80063b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b2:	b01d      	add	sp, #116	; 0x74
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	ab03      	add	r3, sp, #12
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4622      	mov	r2, r4
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <_svfiprintf_r+0x1ec>)
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	4640      	mov	r0, r8
 80063c4:	f000 f882 	bl	80064cc <_printf_i>
 80063c8:	e7ea      	b.n	80063a0 <_svfiprintf_r+0x1b0>
 80063ca:	bf00      	nop
 80063cc:	08006e80 	.word	0x08006e80
 80063d0:	08006e86 	.word	0x08006e86
 80063d4:	08006e8a 	.word	0x08006e8a
 80063d8:	00000000 	.word	0x00000000
 80063dc:	0800613d 	.word	0x0800613d

080063e0 <_printf_common>:
 80063e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	4691      	mov	r9, r2
 80063e6:	461f      	mov	r7, r3
 80063e8:	688a      	ldr	r2, [r1, #8]
 80063ea:	690b      	ldr	r3, [r1, #16]
 80063ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	bfb8      	it	lt
 80063f4:	4613      	movlt	r3, r2
 80063f6:	f8c9 3000 	str.w	r3, [r9]
 80063fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fe:	4606      	mov	r6, r0
 8006400:	460c      	mov	r4, r1
 8006402:	b112      	cbz	r2, 800640a <_printf_common+0x2a>
 8006404:	3301      	adds	r3, #1
 8006406:	f8c9 3000 	str.w	r3, [r9]
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	0699      	lsls	r1, r3, #26
 800640e:	bf42      	ittt	mi
 8006410:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006414:	3302      	addmi	r3, #2
 8006416:	f8c9 3000 	strmi.w	r3, [r9]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d107      	bne.n	8006432 <_printf_common+0x52>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	f8d9 2000 	ldr.w	r2, [r9]
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	42ab      	cmp	r3, r5
 8006430:	dc28      	bgt.n	8006484 <_printf_common+0xa4>
 8006432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	3300      	adds	r3, #0
 800643a:	bf18      	it	ne
 800643c:	2301      	movne	r3, #1
 800643e:	0692      	lsls	r2, r2, #26
 8006440:	d42d      	bmi.n	800649e <_printf_common+0xbe>
 8006442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006446:	4639      	mov	r1, r7
 8006448:	4630      	mov	r0, r6
 800644a:	47c0      	blx	r8
 800644c:	3001      	adds	r0, #1
 800644e:	d020      	beq.n	8006492 <_printf_common+0xb2>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	68e5      	ldr	r5, [r4, #12]
 8006454:	f8d9 2000 	ldr.w	r2, [r9]
 8006458:	f003 0306 	and.w	r3, r3, #6
 800645c:	2b04      	cmp	r3, #4
 800645e:	bf08      	it	eq
 8006460:	1aad      	subeq	r5, r5, r2
 8006462:	68a3      	ldr	r3, [r4, #8]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	bf0c      	ite	eq
 8006468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800646c:	2500      	movne	r5, #0
 800646e:	4293      	cmp	r3, r2
 8006470:	bfc4      	itt	gt
 8006472:	1a9b      	subgt	r3, r3, r2
 8006474:	18ed      	addgt	r5, r5, r3
 8006476:	f04f 0900 	mov.w	r9, #0
 800647a:	341a      	adds	r4, #26
 800647c:	454d      	cmp	r5, r9
 800647e:	d11a      	bne.n	80064b6 <_printf_common+0xd6>
 8006480:	2000      	movs	r0, #0
 8006482:	e008      	b.n	8006496 <_printf_common+0xb6>
 8006484:	2301      	movs	r3, #1
 8006486:	4652      	mov	r2, sl
 8006488:	4639      	mov	r1, r7
 800648a:	4630      	mov	r0, r6
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d103      	bne.n	800649a <_printf_common+0xba>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649a:	3501      	adds	r5, #1
 800649c:	e7c3      	b.n	8006426 <_printf_common+0x46>
 800649e:	18e1      	adds	r1, r4, r3
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	2030      	movs	r0, #48	; 0x30
 80064a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a8:	4422      	add	r2, r4
 80064aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b2:	3302      	adds	r3, #2
 80064b4:	e7c5      	b.n	8006442 <_printf_common+0x62>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4622      	mov	r2, r4
 80064ba:	4639      	mov	r1, r7
 80064bc:	4630      	mov	r0, r6
 80064be:	47c0      	blx	r8
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0e6      	beq.n	8006492 <_printf_common+0xb2>
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e7d8      	b.n	800647c <_printf_common+0x9c>
	...

080064cc <_printf_i>:
 80064cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064d4:	460c      	mov	r4, r1
 80064d6:	7e09      	ldrb	r1, [r1, #24]
 80064d8:	b085      	sub	sp, #20
 80064da:	296e      	cmp	r1, #110	; 0x6e
 80064dc:	4617      	mov	r7, r2
 80064de:	4606      	mov	r6, r0
 80064e0:	4698      	mov	r8, r3
 80064e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064e4:	f000 80b3 	beq.w	800664e <_printf_i+0x182>
 80064e8:	d822      	bhi.n	8006530 <_printf_i+0x64>
 80064ea:	2963      	cmp	r1, #99	; 0x63
 80064ec:	d036      	beq.n	800655c <_printf_i+0x90>
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x3a>
 80064f0:	2900      	cmp	r1, #0
 80064f2:	f000 80b9 	beq.w	8006668 <_printf_i+0x19c>
 80064f6:	2958      	cmp	r1, #88	; 0x58
 80064f8:	f000 8083 	beq.w	8006602 <_printf_i+0x136>
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006504:	e032      	b.n	800656c <_printf_i+0xa0>
 8006506:	2964      	cmp	r1, #100	; 0x64
 8006508:	d001      	beq.n	800650e <_printf_i+0x42>
 800650a:	2969      	cmp	r1, #105	; 0x69
 800650c:	d1f6      	bne.n	80064fc <_printf_i+0x30>
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	0605      	lsls	r5, r0, #24
 8006514:	f103 0104 	add.w	r1, r3, #4
 8006518:	d52a      	bpl.n	8006570 <_printf_i+0xa4>
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da03      	bge.n	800652a <_printf_i+0x5e>
 8006522:	222d      	movs	r2, #45	; 0x2d
 8006524:	425b      	negs	r3, r3
 8006526:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800652a:	486f      	ldr	r0, [pc, #444]	; (80066e8 <_printf_i+0x21c>)
 800652c:	220a      	movs	r2, #10
 800652e:	e039      	b.n	80065a4 <_printf_i+0xd8>
 8006530:	2973      	cmp	r1, #115	; 0x73
 8006532:	f000 809d 	beq.w	8006670 <_printf_i+0x1a4>
 8006536:	d808      	bhi.n	800654a <_printf_i+0x7e>
 8006538:	296f      	cmp	r1, #111	; 0x6f
 800653a:	d020      	beq.n	800657e <_printf_i+0xb2>
 800653c:	2970      	cmp	r1, #112	; 0x70
 800653e:	d1dd      	bne.n	80064fc <_printf_i+0x30>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	e003      	b.n	8006552 <_printf_i+0x86>
 800654a:	2975      	cmp	r1, #117	; 0x75
 800654c:	d017      	beq.n	800657e <_printf_i+0xb2>
 800654e:	2978      	cmp	r1, #120	; 0x78
 8006550:	d1d4      	bne.n	80064fc <_printf_i+0x30>
 8006552:	2378      	movs	r3, #120	; 0x78
 8006554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006558:	4864      	ldr	r0, [pc, #400]	; (80066ec <_printf_i+0x220>)
 800655a:	e055      	b.n	8006608 <_printf_i+0x13c>
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	1d19      	adds	r1, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6011      	str	r1, [r2, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e08c      	b.n	800668a <_printf_i+0x1be>
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6011      	str	r1, [r2, #0]
 8006574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006578:	bf18      	it	ne
 800657a:	b21b      	sxthne	r3, r3
 800657c:	e7cf      	b.n	800651e <_printf_i+0x52>
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1d18      	adds	r0, r3, #4
 8006584:	6010      	str	r0, [r2, #0]
 8006586:	0628      	lsls	r0, r5, #24
 8006588:	d501      	bpl.n	800658e <_printf_i+0xc2>
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	e002      	b.n	8006594 <_printf_i+0xc8>
 800658e:	0668      	lsls	r0, r5, #25
 8006590:	d5fb      	bpl.n	800658a <_printf_i+0xbe>
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	4854      	ldr	r0, [pc, #336]	; (80066e8 <_printf_i+0x21c>)
 8006596:	296f      	cmp	r1, #111	; 0x6f
 8006598:	bf14      	ite	ne
 800659a:	220a      	movne	r2, #10
 800659c:	2208      	moveq	r2, #8
 800659e:	2100      	movs	r1, #0
 80065a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065a4:	6865      	ldr	r5, [r4, #4]
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	f2c0 8095 	blt.w	80066d8 <_printf_i+0x20c>
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	f021 0104 	bic.w	r1, r1, #4
 80065b4:	6021      	str	r1, [r4, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d13d      	bne.n	8006636 <_printf_i+0x16a>
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	f040 808e 	bne.w	80066dc <_printf_i+0x210>
 80065c0:	4665      	mov	r5, ip
 80065c2:	2a08      	cmp	r2, #8
 80065c4:	d10b      	bne.n	80065de <_printf_i+0x112>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07db      	lsls	r3, r3, #31
 80065ca:	d508      	bpl.n	80065de <_printf_i+0x112>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	bfde      	ittt	le
 80065d4:	2330      	movle	r3, #48	; 0x30
 80065d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065de:	ebac 0305 	sub.w	r3, ip, r5
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	f8cd 8000 	str.w	r8, [sp]
 80065e8:	463b      	mov	r3, r7
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fef6 	bl	80063e0 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14d      	bne.n	8006694 <_printf_i+0x1c8>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b005      	add	sp, #20
 80065fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006602:	4839      	ldr	r0, [pc, #228]	; (80066e8 <_printf_i+0x21c>)
 8006604:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	1d1d      	adds	r5, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6015      	str	r5, [r2, #0]
 8006612:	060a      	lsls	r2, r1, #24
 8006614:	d50b      	bpl.n	800662e <_printf_i+0x162>
 8006616:	07ca      	lsls	r2, r1, #31
 8006618:	bf44      	itt	mi
 800661a:	f041 0120 	orrmi.w	r1, r1, #32
 800661e:	6021      	strmi	r1, [r4, #0]
 8006620:	b91b      	cbnz	r3, 800662a <_printf_i+0x15e>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	f022 0220 	bic.w	r2, r2, #32
 8006628:	6022      	str	r2, [r4, #0]
 800662a:	2210      	movs	r2, #16
 800662c:	e7b7      	b.n	800659e <_printf_i+0xd2>
 800662e:	064d      	lsls	r5, r1, #25
 8006630:	bf48      	it	mi
 8006632:	b29b      	uxthmi	r3, r3
 8006634:	e7ef      	b.n	8006616 <_printf_i+0x14a>
 8006636:	4665      	mov	r5, ip
 8006638:	fbb3 f1f2 	udiv	r1, r3, r2
 800663c:	fb02 3311 	mls	r3, r2, r1, r3
 8006640:	5cc3      	ldrb	r3, [r0, r3]
 8006642:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006646:	460b      	mov	r3, r1
 8006648:	2900      	cmp	r1, #0
 800664a:	d1f5      	bne.n	8006638 <_printf_i+0x16c>
 800664c:	e7b9      	b.n	80065c2 <_printf_i+0xf6>
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	6825      	ldr	r5, [r4, #0]
 8006652:	6961      	ldr	r1, [r4, #20]
 8006654:	1d18      	adds	r0, r3, #4
 8006656:	6010      	str	r0, [r2, #0]
 8006658:	0628      	lsls	r0, r5, #24
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	d501      	bpl.n	8006662 <_printf_i+0x196>
 800665e:	6019      	str	r1, [r3, #0]
 8006660:	e002      	b.n	8006668 <_printf_i+0x19c>
 8006662:	066a      	lsls	r2, r5, #25
 8006664:	d5fb      	bpl.n	800665e <_printf_i+0x192>
 8006666:	8019      	strh	r1, [r3, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	4665      	mov	r5, ip
 800666e:	e7b9      	b.n	80065e4 <_printf_i+0x118>
 8006670:	6813      	ldr	r3, [r2, #0]
 8006672:	1d19      	adds	r1, r3, #4
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	681d      	ldr	r5, [r3, #0]
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	2100      	movs	r1, #0
 800667c:	4628      	mov	r0, r5
 800667e:	f7f9 fdaf 	bl	80001e0 <memchr>
 8006682:	b108      	cbz	r0, 8006688 <_printf_i+0x1bc>
 8006684:	1b40      	subs	r0, r0, r5
 8006686:	6060      	str	r0, [r4, #4]
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	2300      	movs	r3, #0
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006692:	e7a7      	b.n	80065e4 <_printf_i+0x118>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	462a      	mov	r2, r5
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	47c0      	blx	r8
 800669e:	3001      	adds	r0, #1
 80066a0:	d0aa      	beq.n	80065f8 <_printf_i+0x12c>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	079b      	lsls	r3, r3, #30
 80066a6:	d413      	bmi.n	80066d0 <_printf_i+0x204>
 80066a8:	68e0      	ldr	r0, [r4, #12]
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	4298      	cmp	r0, r3
 80066ae:	bfb8      	it	lt
 80066b0:	4618      	movlt	r0, r3
 80066b2:	e7a3      	b.n	80065fc <_printf_i+0x130>
 80066b4:	2301      	movs	r3, #1
 80066b6:	464a      	mov	r2, r9
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d09a      	beq.n	80065f8 <_printf_i+0x12c>
 80066c2:	3501      	adds	r5, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	9a03      	ldr	r2, [sp, #12]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42ab      	cmp	r3, r5
 80066cc:	dcf2      	bgt.n	80066b4 <_printf_i+0x1e8>
 80066ce:	e7eb      	b.n	80066a8 <_printf_i+0x1dc>
 80066d0:	2500      	movs	r5, #0
 80066d2:	f104 0919 	add.w	r9, r4, #25
 80066d6:	e7f5      	b.n	80066c4 <_printf_i+0x1f8>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ac      	bne.n	8006636 <_printf_i+0x16a>
 80066dc:	7803      	ldrb	r3, [r0, #0]
 80066de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e6:	e76c      	b.n	80065c2 <_printf_i+0xf6>
 80066e8:	08006e91 	.word	0x08006e91
 80066ec:	08006ea2 	.word	0x08006ea2

080066f0 <_sbrk_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4c06      	ldr	r4, [pc, #24]	; (800670c <_sbrk_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4605      	mov	r5, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	f7fb ffd6 	bl	80026ac <_sbrk>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_sbrk_r+0x1a>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	b103      	cbz	r3, 800670a <_sbrk_r+0x1a>
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000574 	.word	0x20000574

08006710 <memcpy>:
 8006710:	b510      	push	{r4, lr}
 8006712:	1e43      	subs	r3, r0, #1
 8006714:	440a      	add	r2, r1
 8006716:	4291      	cmp	r1, r2
 8006718:	d100      	bne.n	800671c <memcpy+0xc>
 800671a:	bd10      	pop	{r4, pc}
 800671c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006724:	e7f7      	b.n	8006716 <memcpy+0x6>

08006726 <memmove>:
 8006726:	4288      	cmp	r0, r1
 8006728:	b510      	push	{r4, lr}
 800672a:	eb01 0302 	add.w	r3, r1, r2
 800672e:	d807      	bhi.n	8006740 <memmove+0x1a>
 8006730:	1e42      	subs	r2, r0, #1
 8006732:	4299      	cmp	r1, r3
 8006734:	d00a      	beq.n	800674c <memmove+0x26>
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800673e:	e7f8      	b.n	8006732 <memmove+0xc>
 8006740:	4283      	cmp	r3, r0
 8006742:	d9f5      	bls.n	8006730 <memmove+0xa>
 8006744:	1881      	adds	r1, r0, r2
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	42d3      	cmn	r3, r2
 800674a:	d100      	bne.n	800674e <memmove+0x28>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006752:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006756:	e7f7      	b.n	8006748 <memmove+0x22>

08006758 <__malloc_lock>:
 8006758:	4770      	bx	lr

0800675a <__malloc_unlock>:
 800675a:	4770      	bx	lr

0800675c <_realloc_r>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	4607      	mov	r7, r0
 8006760:	4614      	mov	r4, r2
 8006762:	460e      	mov	r6, r1
 8006764:	b921      	cbnz	r1, 8006770 <_realloc_r+0x14>
 8006766:	4611      	mov	r1, r2
 8006768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800676c:	f7ff bc8c 	b.w	8006088 <_malloc_r>
 8006770:	b922      	cbnz	r2, 800677c <_realloc_r+0x20>
 8006772:	f7ff fc3b 	bl	8005fec <_free_r>
 8006776:	4625      	mov	r5, r4
 8006778:	4628      	mov	r0, r5
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677c:	f000 f814 	bl	80067a8 <_malloc_usable_size_r>
 8006780:	42a0      	cmp	r0, r4
 8006782:	d20f      	bcs.n	80067a4 <_realloc_r+0x48>
 8006784:	4621      	mov	r1, r4
 8006786:	4638      	mov	r0, r7
 8006788:	f7ff fc7e 	bl	8006088 <_malloc_r>
 800678c:	4605      	mov	r5, r0
 800678e:	2800      	cmp	r0, #0
 8006790:	d0f2      	beq.n	8006778 <_realloc_r+0x1c>
 8006792:	4631      	mov	r1, r6
 8006794:	4622      	mov	r2, r4
 8006796:	f7ff ffbb 	bl	8006710 <memcpy>
 800679a:	4631      	mov	r1, r6
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fc25 	bl	8005fec <_free_r>
 80067a2:	e7e9      	b.n	8006778 <_realloc_r+0x1c>
 80067a4:	4635      	mov	r5, r6
 80067a6:	e7e7      	b.n	8006778 <_realloc_r+0x1c>

080067a8 <_malloc_usable_size_r>:
 80067a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ac:	1f18      	subs	r0, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfbc      	itt	lt
 80067b2:	580b      	ldrlt	r3, [r1, r0]
 80067b4:	18c0      	addlt	r0, r0, r3
 80067b6:	4770      	bx	lr

080067b8 <_init>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr

080067c4 <_fini>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr
